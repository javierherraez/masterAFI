dias.semana <- c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo")
# Básicos
?str_extract
?str_view
?str_detect
library(stringr)
dias.semana <- c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo")
# Básicos
?str_extract
?str_view
?str_detect
str_extract(dias.semana, "es")
str_extract(dias.semana, regex("es"))
str_view(dias.semana, "es")
install.packages("htmlwidgets")
str_view(dias.semana, "es")
str_view(dias.semana, regex("es"))
str_detect(dias.semana, "es")
str_detect(dias.semana, regex("es"))
los.lunes <- c("lunes", "Lunes", "LUNES")
str_detect(los.lunes, "lunes")
str_detect(los.lunes, regex("lunes", ignore_case = TRUE))
# Cualquier carácter "."
str_view(dias.semana, ".er.")
# ¿Cómo escapar el carácter "."?
puntos <- c("abc", "c.d", "efg")
str_detect(puntos, "\\.")
# ¿Y qué pasa con el carácter "\"?
barras <- c("abc", "c\\d", "efg")
writeLines(barras)
str_detect(barras, "\\\\")
barras
# Comienzo de cadena
str_view(dias.semana, "^m")
# Final de cadena
str_view(dias.semana, "es$")
install.packages("odbc")
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Prepare a query to retrieve the number of orders per year
sql <- 'SELECT YEAR(OrderDate) AS order_year, COUNT(*) as num_orders
FROM [Order]
GROUP BY YEAR(OrderDate)
ORDER BY YEAR(OrderDate)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Prepare a query to retrieve the number of orders per year
sql <- 'SELECT YEAR(OrderDate) AS order_year, COUNT(*) as num_orders
FROM [Order]
GROUP BY YEAR(OrderDate)
ORDER BY YEAR(OrderDate)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Prepare the results
results <- results[results$order_year != 0, ]
# Draw a plot of retrieved data
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Orders per year')
lines(results)
# Close the connection to the database
dbDisconnect(conn)
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Prepare a query to retrieve the number of orders per year
sql <- 'SELECT YEAR(OrderDate) AS order_year, COUNT(*) as num_orders
FROM [Orders]
GROUP BY YEAR(OrderDate)
ORDER BY YEAR(OrderDate)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Prepare the results
results <- results[results$order_year != 0, ]
# Draw a plot of retrieved data
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Orders per year')
lines(results)
# Close the connection to the database
dbDisconnect(conn)
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
barplot(results, main = 'Suppliers by country', las = 2)
barplot(results, main = 'Suppliers by country', las = 2)
# Prepare a query to retrieve the number of orders per year
sql <- 'SELECT YEAR(OrderDate) AS order_year, COUNT(*) as num_orders
FROM [Order]
GROUP BY YEAR(OrderDate)
ORDER BY YEAR(OrderDate)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Prepare the results
results <- results[results$order_year != 0, ]
# Draw a plot of retrieved data
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Orders per year')
lines(results)
# Close the connection to the database
dbDisconnect(conn)
# Load required packages
library(odbc)
# Create a connection to the store database
conn <- dbConnect(odbc(),
Driver = "SQL Server",
Server = "localhost\\SQLExpress",
Database = "Store",
#                  UID = "sa",
#                  PWD = "SQL",
Trusted_Connection = "True",
Port = 1433)
# Prepare a query to retrieve the number of suppliers per country
sql <- 'SELECT Country AS country , COUNT(*) num_suppliers
FROM Supplier
GROUP BY Country'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$country
results <- results[, 'num_suppliers', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Suppliers by country', las = 2)
# Prepare a query to retrieve the number of orders per year
sql <- 'SELECT YEAR(OrderDate) AS order_year, COUNT(*) as num_orders
FROM [Orders]
GROUP BY YEAR(OrderDate)
ORDER BY YEAR(OrderDate)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Prepare the results
results <- results[results$order_year != 0, ]
# Draw a plot of retrieved data
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Orders per year')
lines(results)
# Close the connection to the database
dbDisconnect(conn)
# directorio de trabajo
setwd("Z:/MDS_F/Aprendizaje no supervisado/Code")
datosBanca <- read.csv("datosBanca.csv", header = TRUE, sep=",")
# directorio de trabajo
setwd("Z:/MDS_F/Aprendizaje no supervisado/Data")
datosBanca <- read.csv("datosBanca.csv", header = TRUE, sep=",")
View(datosBanca)
# install.packages("nima")
library(nima)
install.packages("nima")
# install.packages("nima")
library(nima)
datosBanca$checkingAccount_CAT<-discrete_by_quantile(datosBanca$checkingAccount)/4
View(datosBanca)
datosBanca$deposit_CAT<-discrete_by_quantile(datosBanca$deposit)/4
datosBanca$shareOfStock_CAT<-discrete_by_quantile(datosBanca$shareOfStock)/4
datosBanca$pensionPlan_CAT<-discrete_by_quantile(datosBanca$pensionPlan)/4
datosBanca$mortgage_CAT<-discrete_by_quantile(datosBanca$mortgage)/4
# Como da un error, la asignamos con IF
summary(datosBanca$mortgage)
datosBanca$mortgage_CAT<-datosBanca$mortgage
datosBanca$mortgage_CAT <- ifelse(datosBanca$mortgage <= 0, 1, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(0<datosBanca$mortgage & datosBanca$mortgage<= 44752, 2, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(44752<datosBanca$mortgage & datosBanca$mortgage<= 125483, 3, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(125483<datosBanca$mortgage, 4, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- datosBanca$mortgage_CAT/4
summary(datosBanca$mortgage_CAT)
datosBanca$loan_CAT<-discrete_by_quantile(datosBanca$loan)/4
datosBanca$cards_CAT<-discrete_by_quantile(datosBanca$cards)/4
datosBanca$insurance_CAT<-discrete_by_quantile(datosBanca$insurance)/4
datosBanca$billPayment_CAT<-discrete_by_quantile(datosBanca$billPayment)/4
datosBanca$salary_CAT<-as.numeric(datosBanca$salary)
summary(datosBanca)
datosBanca$checkingAccount_CAT[is.na(datosBanca$checkingAccount_CAT)]<-0
datosBanca$deposit_CAT[is.na(datosBanca$deposit_CAT)]<-0
datosBanca$shareOfStock_CAT[is.na(datosBanca$shareOfStock_CAT)]<-0
datosBanca$pensionPlan_CAT[is.na(datosBanca$pensionPlan_CAT)]<-0
datosBanca$mortgage_CAT[is.na(datosBanca$mortgage_CAT)]<-0
datosBanca$loan_CAT[is.na(datosBanca$loan_CAT)]<-0
datosBanca$cards_CAT[is.na(datosBanca$cards_CAT)]<-0
datosBanca$insurance_CAT[is.na(datosBanca$insurance_CAT)]<-0
datosBanca$billPayment_CAT[is.na(datosBanca$billPayment_CAT)]<-0
corr(datosBanca)
cor(datosBanca)
cor(datosBanca[,12:21])
help(cor)
cor(datosBanca[,12:21],method = c("spearman"))
centroideTotalCartera <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from datosBanca")
clientesNominados <- subset(datosBanca,datosBanca$salary==1)
centroideTotalCartera <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from datosBanca")
# install.packages("sqldf")
library(sqldf)
centroideTotalCartera <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from datosBanca")
clientesNominados <- subset(datosBanca,datosBanca$salary==1)
centroideNominados <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesNominados")
clientesHipotecados <- subset(datosBanca,datosBanca$mortgage_CAT>0)
centroideHipotecados <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesHipotecados")
clientesInversores <- subset(datosBanca,datosBanca$shareOfStock_CAT>0)
centroideInversores <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesInversores")
centroides<-rbind(centroideTotalCartera,centroideNominados,centroideHipotecados,centroideInversores)
View(centroides)
# install.packages("fmsb")
library(fmsb)
centroidesParaRadar<-rbind(
rep(1,10) ,
rep(0,10) ,
centroides)
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )
for (i in 3:nrow(centroidesParaRadar)-3)
{
radarchart( as.data.frame(centroidesParaRadar[c(1:3,3+i),])  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
}
