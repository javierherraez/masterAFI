str(data$Climate)
data <- data[, !(names(Auto) %in% c("Country", "Region", "Climate"))]
cor(data)
data <- data[, !(names(Auto) %in% c("Country", "Region", "Climate"))]
cor(data)
data <- data[, !(names(Auto) %in% c("Country", "Region", "Climate"))]
str(data)
cor(data)
data <- data[, !(names(data) %in% c("Country", "Region", "Climate"))]
str(data)
cor(data)
data <- data[, !(names(data) %in% c("Country", "Region", "Climate"))]
cor(data)
data <- data[, !(names(data) %in% c("Country", "Region", "Climate"))]
plot(data)
cor(data)
lm_gdp <- regsubsets(GDP ~ ., data = data, nvmax = 20)
lm_bss_best_sumary <- summary(lm_gdp)
lm_bss_best_sumary
# R2
plot(lm_bss_best_sumary$rsq, xlab = "Numero de variables", ylab = "R2", type = "b")
# R2 ajustado
plot(lm_bss_best_sumary$adjr2, xlab = "Numero de variables", ylab = "R2 ajustado", type = "b")
plot(lm_bss_best,scale="adjr2")
# BIC
plot(lm_bss_best_sumary$bic, xlab = "Numero de variables", ylab = "BIC", type = "b")
plot(lm_bss_best,scale="bic")
lm_gdp <- lm(GDP ~ Phones + Net_migration + Agriculture +
Pop_Density + Infant_mortality + Deathrate + Other
, data = data)
lm_gdp <- lm(GDP ~ Phones + Net_migration + Agriculture + Pop_Density + Infant_mortality + Deathrate + Other
, data = data)
lm_gdp <- lm(GDP ~ Phones + Net_migration + Agriculture + Pop_Density.
+ Infant_mortality + Deathrate + Other
, data = data)
summary(lm_gdp)
lm_gdp <- lm(GDP ~ Phones + Net_migration + Agriculture
+ Infant_mortality + Deathrate
, data = data)
summary(lm_gdp)
lm_gdp_2 <- lm(GDP ~ Phones + Net_migration + Agriculture
+ Infant_mortality + Deathrate
, data = data)
summary(lm_gdp_2)
library(ISLR)
library(leaps)
library(stats)
library(regclass)
library(lmtest)
library(nortest)
VIF(lm_gdp)
lm_gdp <- lm(GDP ~ Phones + Net_migration + Agriculture + Pop_Density.
+ Infant_mortality + Deathrate + Other
, data = data)
summary(lm_gdp)
lm_gdp_2 <- lm(GDP ~ Phones + Net_migration + Agriculture
+ Infant_mortality + Deathrate
, data = data)
summary(lm_gdp_2)
VIF(lm_gdp)
summary(lm_gdp)
raintest(lm_mpg)
t.test(lm_mpg$residuals)
bptest(lm_mpg)
dwtest(lm_mpg)
shapiro.test(lm_mpg$residuals)
ad.test(lm_mpg$residuals)
raintest(lm_gdp)
t.test(lm_gdp$residuals)
bptest(lm_gdp)
dwtest(lm_gdp)
shapiro.test(lm_gdp$residuals)
ad.test(lm_gdp$residuals)
```{r respuesta}
summary(lm_gdp)
data(BostonHousing)
library(mlbench)
data(BostonHousing)
# Cantidad total de filas
nrow(BostonHousing)
# Cantidad total de columnas
ncol(BostonHousing)
# Nombres de columnas
colnames(BostonHousing)
head(BostonHousing)
str(BostonHousing)
summary(BostonHousing)
for(i in 1:ncol(BostonHousing)){
if(colnames(BostonHousing)[i] != "medv"){
plot(BostonHousing[,i], BostonHousing$medv, type='p', xlab=names(BostonHousing)[i], ylab="medv")
}
}
plot(1/BostonHousing$lstat, BostonHousing$medv, type='p', xlab="1/lstat", ylab="medv")
hist(BostonHousing$medv, breaks = 20)
BostonHousing['1/lstat'] <- 1/BostonHousing$lstat
M <- cor(BostonHousing[-4])
ggcorr(M, label = TRUE)
library(GGally) # ggplot2-based visualization of correlations
ggcorr(M, label = TRUE)
M
ggcorr(BostonHousing, label = TRUE)
BostonHousing
ggcorr(BostonHousing, label = TRUE)
M
model <- regsubsets(medv ~ . + I(1/lstat), data = BostonHousing, nvmax = 14)
library(leaps)
model <- regsubsets(medv ~ . + I(1/lstat), data = BostonHousing, nvmax = 14)
model <- regsubsets(medv ~ . , data = BostonHousing, nvmax = 14)
model_sumary <- summary(model)
model_sumary
# R2
plot(model_sumary$rsq, xlab = "Numero de variables", ylab = "R2", type = "b")
text(model_sumary$rsq,
labels = round(model_sumary$rsq, 4),
cex = 0.6, pos = 4, col = "red")
# R2 ajustado
plot(model_sumary$adjr2, xlab = "Numero de variables", ylab = "R2 ajustado", type = "b")
text(model_sumary$adjr2,
labels = round(model_sumary$adjr2, 4),
cex = 0.6, pos = 4, col = "red")
# BIC
plot(model_sumary$bic, xlab = "Numero de variables", ylab = "BIC", type = "b")
text(model_sumary$bic,
labels = round(model_sumary$bic, 4),
cex = 0.6, pos = 4, col = "red")
# Cp Mallows
plot(model_sumary$cp, xlab = "Numero de variables", ylab = "Cp", type = "b")
text(model_sumary$cp,
labels = round(model_sumary$cp, 4),
cex = 0.6, pos = 4, col = "red")
# AIC
n <- nrow(BostonHousing)
p <- apply(model_sumary$which, 1, sum)
aic <- model_sumary$bic - log(n) * p + 2 * p
plot(aic, xlab = "Numero de variables", ylab = "AIC", type = "b")
text(aic,
labels = round(aic, 4),
cex = 0.6, pos = 4, col = "red")
lm_medv <- lm(medv ~  chas + nox + rm + dis + ptratio + lstat, data = BostonHousing)
summary(lm_medv)
VIF(lm_medv)
library(mlbench)
library(dplyr)
library(GGally) # ggplot2-based visualization of correlations
library(leaps)
library(lmtest)
library(regclass)
library(nortest)
data(BostonHousing)
# Cantidad total de filas
nrow(BostonHousing)
# Cantidad total de columnas
ncol(BostonHousing)
# Nombres de columnas
colnames(BostonHousing)
head(BostonHousing)
str(BostonHousing)
summary(BostonHousing)
for(i in 1:ncol(BostonHousing)){
if(colnames(BostonHousing)[i] != "medv"){
plot(BostonHousing[,i], BostonHousing$medv, type='p', xlab=names(BostonHousing)[i], ylab="medv")
}
}
plot(1/BostonHousing$lstat, BostonHousing$medv, type='p', xlab="1/lstat", ylab="medv")
hist(BostonHousing$medv, breaks = 20)
BostonHousing['1/lstat'] <- 1/BostonHousing$lstat
ggcorr(BostonHousing, label = TRUE)
model <- regsubsets(medv ~ . , data = BostonHousing, nvmax = 14)
model_sumary <- summary(model)
model_sumary
# R2
plot(model_sumary$rsq, xlab = "Numero de variables", ylab = "R2", type = "b")
text(model_sumary$rsq,
labels = round(model_sumary$rsq, 4),
cex = 0.6, pos = 4, col = "red")
# R2 ajustado
plot(model_sumary$adjr2, xlab = "Numero de variables", ylab = "R2 ajustado", type = "b")
text(model_sumary$adjr2,
labels = round(model_sumary$adjr2, 4),
cex = 0.6, pos = 4, col = "red")
# BIC
plot(model_sumary$bic, xlab = "Numero de variables", ylab = "BIC", type = "b")
text(model_sumary$bic,
labels = round(model_sumary$bic, 4),
cex = 0.6, pos = 4, col = "red")
# Cp Mallows
plot(model_sumary$cp, xlab = "Numero de variables", ylab = "Cp", type = "b")
text(model_sumary$cp,
labels = round(model_sumary$cp, 4),
cex = 0.6, pos = 4, col = "red")
# AIC
n <- nrow(BostonHousing)
p <- apply(model_sumary$which, 1, sum)
aic <- model_sumary$bic - log(n) * p + 2 * p
plot(aic, xlab = "Numero de variables", ylab = "AIC", type = "b")
text(aic,
labels = round(aic, 4),
cex = 0.6, pos = 4, col = "red")
lm_medv <- lm(medv ~  chas + nox + rm + dis + ptratio + lstat, data = BostonHousing)
summary(lm_medv)
VIF(lm_medv)
raintest(lm_medv)
t.test(lm_medv$residuals)
bptest(lm_medv)
dwtest(lm_medv)
shapiro.test(lm_medv$residuals)
ad.test(lm_medv$residuals)
library(mlbench)
library(dplyr)
library(GGally) # ggplot2-based visualization of correlations
library(leaps)
library(lmtest)
library(regclass)
library(nortest)
library(car)
data(BostonHousing)
# Cantidad total de filas
nrow(BostonHousing)
# Cantidad total de columnas
ncol(BostonHousing)
# Nombres de columnas
colnames(BostonHousing)
head(BostonHousing)
str(BostonHousing)
summary(BostonHousing)
for(i in 1:ncol(BostonHousing)){
if(colnames(BostonHousing)[i] != "medv"){
plot(BostonHousing[,i], BostonHousing$medv, type='p', xlab=names(BostonHousing)[i], ylab="medv")
}
}
hist(BostonHousing$medv, breaks = 20)
ggcorr(BostonHousing, label = TRUE)
model <- regsubsets(medv ~ . , data = BostonHousing, nvmax = ncol(BostonHousing))
model_sumary <- summary(model)
model_sumary
# R2
plot(model_sumary$rsq, xlab = "Numero de variables", ylab = "R2", type = "b")
text(model_sumary$rsq,
labels = round(model_sumary$rsq, 4),
cex = 0.6, pos = 4, col = "red")
# R2 ajustado
plot(model_sumary$adjr2, xlab = "Numero de variables", ylab = "R2 ajustado", type = "b")
text(model_sumary$adjr2,
labels = round(model_sumary$adjr2, 4),
cex = 0.6, pos = 4, col = "red")
# BIC
plot(model_sumary$bic, xlab = "Numero de variables", ylab = "BIC", type = "b")
text(model_sumary$bic,
labels = round(model_sumary$bic, 4),
cex = 0.6, pos = 4, col = "red")
# Cp Mallows
plot(model_sumary$cp, xlab = "Numero de variables", ylab = "Cp", type = "b")
text(model_sumary$cp,
labels = round(model_sumary$cp, 4),
cex = 0.6, pos = 4, col = "red")
# AIC
n <- nrow(BostonHousing)
p <- apply(model_sumary$which, 1, sum)
aic <- model_sumary$bic - log(n) * p + 2 * p
plot(aic, xlab = "Numero de variables", ylab = "AIC", type = "b")
text(aic,
labels = round(aic, 4),
cex = 0.6, pos = 4, col = "red")
lm_medv <- lm(medv ~ crim + nox + rm + dis + rad + tax + ptratio + b + lstat, data = BostonHousing)
summary(lm_medv)
plot(BostonHousing$medv, lm_medv$residuals, xlab='medv', ylab='residuals')
boxplot(lm_medv$residuals)
plot(1/BostonHousing$lstat, BostonHousing$medv, type='p', xlab="1/lstat", ylab="medv")
lm_medv_inv_lstat <- update(lm_medv, . ~ . + I(1/lstat))
summary(lm_medv_inv_lstat)
plot(BostonHousing$medv, lm_medv_inv_lstat$residuals, xlab='medv', ylab='residuals')
plot(hatvalues(lm_medv_inv_lstat))
cooksD <- cooks.distance(lm_medv_inv_lstat)
plot(cooksD, pch=20, main="Influential Obs by Cooks Distance")
abline(h = 4*mean(cooksD), col='red')
VIF(lm_medv_inv_lstat)
lm_medv_candidate <- update(lm_medv_inv_lstat, . ~ . - tax - lstat)
summary(lm_medv_candidate)
VIF(lm_medv_candidate)
crPlots(lm_medv_candidate)
plot(lm_medv_candidate)
t.test(lm_medv_candidate$residuals)
bptest(lm_medv_candidate)
dwtest(lm_medv_candidate)
shapiro.test(lm_medv_candidate$residuals)
ad.test(lm_medv_candidate$residuals)
crPlots(lm_medv_candidate)
raintest(lm_medv_candidate)
raintest(lm_medv)
raintest(lm_medv_inv_lstat)
library(caret)
mod_1 <- lm_medv
mod_2 <- lm_medv_inv_lstat
mod_3 <- lm_medv_candidate
#1. leave-one-out cross-validation
err_1 <- c()
err_2 <- c()
err_3 <- c()
for(i in 1:nrow(BostonHousing)){
mod_1.LOOCV <- update(mod_1, data = BostonHousing[-i,])
mod_2.LOOCV <- update(mod_2, data = BostonHousing[-i,])
mod_3.LOOCV <- update(mod_3, data = BostonHousing[-i,])
err_1 <- c(err_1, (BostonHousing$medv[i] - predict(mod_1.LOOCV, BostonHousing[i,]))**2)
err_2 <- c(err_2,  (BostonHousing$medv[i] - predict(mod_2.LOOCV, BostonHousing[i,]))**2)
err_3 <- c(err_3,  (BostonHousing$medv[i] - predict(mod_3.LOOCV, BostonHousing[i,]))**2)
}
mean(err_1)
mean(err_2)
mean(err_3)
#2. 10-fold cross-validation
fold_index_list <- createFolds(BostonHousing$medv, k = 10)
lapply(fold_index_list, length)
mat <- matrix(nrow = 0, ncol = 6)
colnames(mat) <- c('mse_train_1', 'mse_test_1', 'mse_train_2', 'mse_test_2',
'mse_train_3', 'mse_test_3')
for(fold in fold_index_list){
training_data <- BostonHousing[-fold, ]
test_data <- BostonHousing[fold, ]
mod_1.10_fold_CV <- update(mod_1, data = training_data)
mod_2.10_fold_CV <- update(mod_2, data = training_data)
mod_3.10_fold_CV <- update(mod_3, data = training_data)
mse_train_1 <- mean((mod_1.10_fold_CV$residuals)**2)
mse_train_2 <- mean((mod_2.10_fold_CV$residuals)**2)
mse_train_3 <- mean((mod_3.10_fold_CV$residuals)**2)
mse_test_1 <- mean((test_data$medv - predict(mod_1.10_fold_CV, test_data))**2)
mse_test_2 <- mean((test_data$medv - predict(mod_2.10_fold_CV, test_data))**2)
mse_test_3 <- mean((test_data$medv - predict(mod_3.10_fold_CV, test_data))**2)
mat <- rbind(mat, c(mse_train_1,
mse_test_1,
mse_train_2,
mse_test_2,
mse_train_3,
mse_test_3))
}
mat <- as.data.frame(mat)
colMeans(mat)
library(dplyr)
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
head(asegurados)
summary(asegurados)
setwd("ASIGNATURAS MASTER/Tratamiento estadístico de la información/MDS_Preprocesado/ejercicios_R/")
library(dplyr)
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
head(asegurados)
summary(asegurados)
table(is.na(asegurados))
i=0
unique(asegurados[,i])
i = 1
unique(asegurados[,i])
unique(asegurados[,2])
typeof(asegurados[, 2])
typeof(asegurados[, 4])
typeof(asegurados$BRAND_TEXT)
typeof(asegurados$DES_ZONE2)
str(asegurados)
typeof(asegurados$FUEL)
typeof(asegurados$N_CLAIMS)
typeof(asegurados)
class(asegurados$FUEL)
library(dplyr)
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
head(asegurados)
summary(asegurados)
table(is.na(asegurados))
valores_unicos <- c()
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
unique(asegurados[,i])
}
}
class(asegurados$FUEL)
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos <- c(valores_unicos, unique(asegurados[,i]))
}
}
valores_unicos <- c()
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[[i]] <- unique(asegurados[,i])
}
}
View(valores_unicos)
table(valores_unicos)
valores_unicos[, 10]
valores_unicos <- c()
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[i] <- unique(asegurados[,i])
}
}
valores_unicos <- c()
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[,i] <- unique(asegurados[,i])
}
}
class(asegurados[[i]]
)
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
unique(asegurados[,i])
}
}
valores_unicos <- c()
j = 1
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[[j]] <- unique(asegurados[,i])
j = j + 1
}
}
valores_unicos
valores_unicos[[4]]
asegurados[asegurados$DES_ZONE2 == '']
asegurados[,asegurados$DES_ZONE2 == '']
asegurados$DES_ZONE2 == ''
asegurados[asegurados$DES_ZONE2 == '',]
asegurados[asegurados$DES_ZONE2 == '',]$DES_ZONE2 <- NA
asegurados[asegurados$DES_ZONE2 == '',]
asegurados[asegurados$DES_ZONE2 == '',]
asegurados[asegurados$DES_ZONE2 == '',]$DES_ZONE2
asegurados[asegurados$DES_ZONE == '',]$DES_ZONE <- NA
table(is.na(asegurados))
summary(asegurados)
asegurados[asegurados$DES_ZONE2 == NA,]
asegurados[is.na(asegurados$DES_ZONE)]
asegurados[is.na(asegurados$DES_ZONE),]
asegurados[is.na(asegurados$DES_ZONE2),]
unique(is.na(asegurados[is.na(asegurados$DES_ZONE2),"DES_ZONE"]))
unique(asegurados[is.na(asegurados$DES_ZONE2),"DES_ZONE"])
asegurados[asegurados$YEAR = 9999,]
asegurados[asegurados$YEAR == 9999,]
asegurados[asegurados$AGE_ADD_DRIVER == 9999,]
asegurados[asegurados$AGE_ADD_DRIVER == 9999,]$AGE_ADD_DRIVER <- NA
summary(asegurados)
asegurados[asegurados$AGE_DRIVER == 9999,]$AGE_DRIVER <- NA
asegurados[asegurados$AGE_LICENSE == 9999,]$AGE_LICENSE <- NA
asegurados[asegurados$AGE_ADD_DRIVER == 9999,]$AGE_ADD_DRIVER <- NA
asegurados[asegurados$AGE_VEHICLE == 9999,]$AGE_VEHICLE <- NA
asegurados[asegurados$POSTCODE == 9999,]$POSTCODE <- NA
asegurados[asegurados$POSTCODE == 9999,]$POSTCODE <- NA
unique(asegurados$POSTCODE)
View(asegurados)
asegurados[asegurados$AGE_LICENSE == 9999,]$AGE_LICENSE <- NA
function (object, ...)
summary(asegurados)
summary(asegurados)
library(dplyr)
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
head(asegurados)
summary(asegurados)
table(is.na(asegurados))
valores_unicos <- c()
j = 1
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[[j]] <- unique(asegurados[,i])
j = j + 1
}
}
asegurados[asegurados$DES_ZONE == '',]$DES_ZONE <- NA
asegurados[asegurados$DES_ZONE2 == '',]$DES_ZONE2 <- NA
summary(asegurados)
asegurados[is.na(asegurados$DES_ZONE),]
asegurados[is.na(asegurados$DES_ZONE2),]
unique(asegurados[is.na(asegurados$DES_ZONE2),"DES_ZONE"])
asegurados[asegurados$AGE_DRIVER == 9999,]$AGE_DRIVER <- NA
asegurados[asegurados$AGE_LICENSE == 9999,]$AGE_LICENSE <- NA
asegurados[asegurados$AGE_ADD_DRIVER == 9999,]$AGE_ADD_DRIVER <- NA
asegurados[asegurados$AGE_VEHICLE == 9999,]$AGE_VEHICLE <- NA
#asegurados[asegurados$POSTCODE == 9999,]$POSTCODE <- NA
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
library(dplyr)
asegurados <- read.csv('windscreen2.csv', sep =';',
stringsAsFactors = T)
head(asegurados)
summary(asegurados)
table(is.na(asegurados))
valores_unicos <- c()
j = 1
for (i in 1:ncol(asegurados)){
if (class(asegurados[[i]]) == "factor"){
valores_unicos[[j]] <- unique(asegurados[,i])
j = j + 1
}
}
asegurados[asegurados$DES_ZONE == '',]$DES_ZONE <- NA
asegurados[asegurados$DES_ZONE2 == '',]$DES_ZONE2 <- NA
summary(asegurados)
asegurados[is.na(asegurados$DES_ZONE),]
asegurados[is.na(asegurados$DES_ZONE2),]
unique(asegurados[is.na(asegurados$DES_ZONE2),"DES_ZONE"])
asegurados[asegurados$AGE_DRIVER == 9999,]$AGE_DRIVER <- NA
asegurados[asegurados$AGE_LICENSE == 9999,]$AGE_LICENSE <- NA
asegurados[asegurados$AGE_ADD_DRIVER == 9999,]$AGE_ADD_DRIVER <- NA
asegurados[asegurados$AGE_VEHICLE == 9999,]$AGE_VEHICLE <- NA
#asegurados[asegurados$POSTCODE == 9999,]$POSTCODE <- NA
asegurados <- asegurados[-YEAR]
asegurados <- asegurados[-'YEAR']
asegurados <- asegurados[,-'YEAR']
asegurados <- asegurados[,-c('YEAR')]
asegurados <- asegurados[,-YEAR]
asegurados <- asegurados[,-'YEAR']
asegurados <- asegurados[,'YEAR']
asegurados
