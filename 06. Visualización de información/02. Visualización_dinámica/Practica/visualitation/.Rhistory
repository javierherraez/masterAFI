})
#return
(leaflet() %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addCircleMarkers(
lng = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[1]])
}),
lat = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[2]])
}),
color = sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))
})
) %>%
leaflet::addLegend("bottomright", pal = pal, values = map_df$salary, title = "Salario",opacity = 1)
)
sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))})
map_df$salary
sapply(geojson$features, function(feat) {
return(feat$properties$salary)})
sapply(geojson$features, function(feat) {
+     return(pal(feat$properties$salary))
+ })
sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))
})
positions = c("F")
map_df <- nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name) %>%
summarise(salary = sum(salary, na.rm = T) / n_distinct(id))
pal <- colorNumeric('Reds', map_df$salary)
geojson$features <- lapply(geojson$features, function(feat){
feat$properties$style <- list(fillColor = pal(map_df$salary[map_df$team_name == feat$properties$team]))
feat$properties$popup <- paste('<b>Equipo:</b>',
feat$properties$cit, feat$properties$team,
'<br><b>Salario medio:</b>',
format(round(map_df$salary[map_df$team_name == feat$properties$team], digits = 0),
nsmall=1, big.mark=".", decimal.mark = ","), "$")
feat$properties$salary <- round(map_df$salary[map_df$team_name == feat$properties$team])
return(feat)
})
leaflet() %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addCircleMarkers(
lng = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[1]])
}),
lat = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[2]])
}),
color = sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))
})
) %>%
leaflet::addLegend("bottomright", pal = pal, values = map_df$salary, title = "Salario",opacity = 1)
)
return
(leaflet() %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addCircleMarkers(
lng = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[1]])
}),
lat = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[2]])
}),
color = sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))
})
) %>%
leaflet::addLegend("bottomright", pal = pal, values = map_df$salary, title = "Salario",opacity = 1)
)
sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))
})
sapply(geojson$features, function(feat) {
return(pal(feat$properties$salary))})
sapply(geojson$features, function(feat) {
return(feat$properties$salary)})
min(sapply(geojson$features, function(feat) {return(feat$properties$salary)}))
min(map_df$salary)
max(sapply(geojson$features, function(feat) {return(feat$properties$salary)}))
max(map_df$salary)
sapply(geojson$features, function(feat) {return(feat$properties$style)})
positions = c("F")
map_df <- nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name) %>%
summarise(salary = sum(salary, na.rm = T) / n_distinct(id))
pal <- colorNumeric('Reds', map_df$salary)
geojson$features <- lapply(geojson$features, function(feat){
feat$properties$style <- list(fillColor = pal(map_df$salary[map_df$team_name == feat$properties$team]))
feat$properties$popup <- paste('<b>Equipo:</b>',
feat$properties$cit, feat$properties$team,
'<br><b>Salario medio:</b>',
format(round(map_df$salary[map_df$team_name == feat$properties$team], digits = 0),
nsmall=1, big.mark=".", decimal.mark = ","), "$")
feat$properties$salary <- round(map_df$salary[map_df$team_name == feat$properties$team])
return(feat)
})
#return
(leaflet() %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addCircleMarkers(
lng = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[1]])
}),
lat = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[2]])
}),
color = sapply(geojson$features, function(feat) {
return(feat$properties$fillColor)
})
) %>%
leaflet::addLegend("bottomright", pal = pal, values = map_df$salary, title = "Salario",opacity = 1)
)
positions = c("F")
map_df <- nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name) %>%
summarise(salary = sum(salary, na.rm = T) / n_distinct(id))
pal <- colorNumeric('Reds', map_df$salary)
geojson$features <- lapply(geojson$features, function(feat){
feat$properties$style <- list(fillColor = pal(map_df$salary[map_df$team_name == feat$properties$team]))
feat$properties$popup <- paste('<b>Equipo:</b>',
feat$properties$cit, feat$properties$team,
'<br><b>Salario medio:</b>',
format(round(map_df$salary[map_df$team_name == feat$properties$team], digits = 0),
nsmall=1, big.mark=".", decimal.mark = ","), "$")
feat$properties$salary <- round(map_df$salary[map_df$team_name == feat$properties$team])
return(feat)
})
#return
(leaflet() %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson) %>%
addCircleMarkers(
lng = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[1]])
}),
lat = sapply(geojson$features, function(feat) {
return(feat$geometr$coordinates[[2]])
}),
color = sapply(geojson$features, function(feat) {
return(feat$properties$style$fillColor)
})
) %>%
leaflet::addLegend("bottomright", pal = pal, values = map_df$salary, title = "Salario",opacity = 1)
)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
setwd("C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation")
source("functions.R")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C'))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected= 'C')
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
round(12435.6778, digits = 0)
?format
format(round(121563526.736, digits = 0), nsmall=1, big.mark=".", decimal.mark = ",")
format(round(121563526.736, digits = 0), nsmall=1, big.mark=".")
format(round(121563526.736, digits = 0), nsmall=1, big.mark=".", decimal.mark = ",")
format(round(121563526.736, digits = 0), nsmall=0, big.mark=".", decimal.mark = ",")
format(round(121563526.736, digits = 0), big.mark=".", decimal.mark = ",")
format(round(121563526.736, digits = 0), big.mark=".")
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C'))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected= 'C')
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C'))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected= 'C')
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
