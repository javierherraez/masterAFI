column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C', 'F'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
source("functions.R")
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C', 'F'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
unique(nba_df$player_position)
positions
dplyr::filter(mtcars, grepl('Toyota|Mazda', type))
dplyr::filter(nba_df, grepl(positions, player_position))
filter(nba_df, player_position %in% positions)
filter(nba_df, player_position %in% positions)
slice(nba_df, match(positions, player_position, 0L))
?slice
slice(nba_df, match(positions, player_position, 0L, n =100))
slice(nba_df, match(positions, player_position, 0L, n =100000))
slice(nba_df, match(positions, player_position, 0L, n =100000))
slice(nba_df, match(positions, player_position, 0L, n =100000))
slice(nba_df, match(positions, player_position, 0L, n =10000000000))
slice(nba_df, match(positions, player_position, 0L, n =10000000))
slice(nba_df, match(positions, player_position, 0L, n = n()))
slice(nba_df, match(positions, player_position, n = n()))
filter(player_position %in% positions)
positions
player_position
slice(nba_df, match(positions, player_position, n = n()))
slice(nba_df, match(positions, player_position), n = n())
slice(nba_df, match(positions, player_position), n = 50000)
slice(nba_df, match(positions, player_position, 0L))
slice(nba_df, match(positions, player_position, 0L), n = n())
filter(nba_df), str_detect(position, paste(positions, collapse="|")))
filter(nba_df, str_detect(position, paste(positions, collapse="|")))
nba_df %>% filter(grepl(paste(positions, collapse="|"), player_position))
nba_df %>% filter(grepl(paste(positions, collapse="|"), player_position))
?grep
?grepl
paste(positions, collapse="|")
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
source("functions.R")
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
source("functions.R")
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(salary = sum(salary, na.rm = T) / n_distinct(player_id))
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(salary = sum(salary, na.rm = T))
View(geojson)
View(nba_df)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(salary = salary, na.rm = T)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(salary = salary)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(salary)
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(avg(salary))
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(sum(salary) / n_distinct(player_id))
nba_df
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name, player_id) %>%
summarise(sum(salary) / n_distinct(id))
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name) %>%
summarise(sum(salary) / n_distinct(id))
nba_df %>%
filter(grepl(paste(positions, collapse="|"), player_position)) %>%
group_by(team_name) %>%
summarise(sum(salary, na.rm = T) / n_distinct(id))
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
source("functions.R")
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
source("functions.R")
# setwd("ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/")
nba_df = read.csv("../data/nba2020.csv")
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
opacity = 1,
fillOpacity = 0.3,
color = 'red'
)
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = "NBA 2020 - 2021",
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS("custom.css"),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2("Estadísticas promedio semanales", style="color:#3C8DBC"))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c("TODOS", unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput("dygraph"), width=12),
box(textOutput("legenddygraph"), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(width = 4,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = c('C')))
),
column(width = 6,
leafletOutput(outputId = 'mapa'))
)
)
)
)
)
# Server
server <- function(input, output){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map)
})
}
# Deployment
shinyApp(ui = ui, server = server)
