gg_simplify_2 <- simplify(gg, remove.multiple = TRUE, remove.loops = TRUE)
View(gg_simplify)
View(gg_simplify_2)
E(g)$weight
E(gg)$weight
E(gg_simplify)$weight
E(gg_simplify_2)$weight
E(gg_simplify_2)$weight[30000:50000]
E(gg_simplify_2)$weight
E(gg_simplify)$weight[30000:50000]
table(E(gg_simplify_2)$weight)
E(gg_simplify_2)$weight
table(E(gg_simplify)$weight)
plot(gg_simplify,
vertex.size=20,
vertex.label.dist=1,
vertex.label.degree=-pi/2,
layout=layout_with_kk)
plot(gg_simplify,
vertex.label.dist=1,
vertex.label.degree=-pi/2,
layout=layout_with_kk, vertex.label='', edge.arrow.size=0,
vertex.size=log(degree(gg_simplify)))
plot(gg_simplify_"",
vertex.label.dist=1,
vertex.label.degree=-pi/2,
layout=layout_with_kk, vertex.label='', edge.arrow.size=0,
vertex.size=log(degree(gg_simplify_2)))
plot(gg_simplify_2,
vertex.label.dist=1,
vertex.label.degree=-pi/2,
layout=layout_with_kk, vertex.label='', edge.arrow.size=0,
vertex.size=log(degree(gg_simplify_2)))
ends(gg_simplify, e)[1]
rm(list = ls())
setwd("C:/Users/Javier/Documents/masterAFI/18. Analisis de Grafos/01. Redes sociales/practica/")
dd <- read.csv("red_contactos.csv", sep = ";")
gg <- graph.data.frame(dd, directed = FALSE)
summary(gg)
vcount(gg)
ecount(gg)
E(gg2)$weight = sapply(E(gg2), function(e) {
length(all_shortest_paths(gg, from=ends(gg2, e)[1], to=ends(gg2, e)[2])$res) } )
gg2 <- simplify(gg, remove.multiple = TRUE, remove.loops = TRUE)
E(gg2)$weight = sapply(E(gg2), function(e) {
length(all_shortest_paths(gg, from=ends(gg2, e)[1], to=ends(gg2, e)[2])$res) } )
all_shortest_paths
?all_shortest_paths
?ends
ends(gg2, E(gg2)[1])
E(gg2)$weight
table(E(gg2)$weight)
summary(gg)
table(E(gg2)$weight)
length(all_shortest_paths(gg, from = ends(gg2, E(gg2)[1])[1], to = ends(gg2, E(gg2)[1])[2])$res)
is.connected(gg, mode = 'weak') # es conexo?
is.connected(gg, mode = 'strong') # es conexo?
is.connected(gg2, mode = 'weak') # es conexo débilmente
is.connected(gg2, mode = 'strong') # es conexo fuertemente
?is.connected
?clusters
ccs <- components(gg2)
ccs <- components(gg2)
id_compmayor <- which.max(ccs$csize) # mayor componente conexa
vids <- ccs$membership == id_compmayor
vids <- which(ccs$membership == id_compmayor) #nodos de la comp conexa mayor
gg3 <- induced_subgraph(gg2, vids = vids ) #subbgrafo solamente con estos nodos
summary(gg3)
ccs$csize
ccs
summary(ccs)
library(igraph)
rm(list = ls())
setwd("C:/Users/Javier/Documents/masterAFI/18. Analisis de Grafos/01. Redes sociales/practica/")
dd <- read.csv("red_contactos.csv", sep = ";")
gg <- graph.data.frame(dd, directed = FALSE)
summary(gg)
vcount(gg)
ecount(gg)
gg2 <- simplify(gg, remove.multiple = TRUE, remove.loops = TRUE)
E(gg2)$weight = sapply(E(gg2), function(e) {
length(all_shortest_paths(gg, from = ends(gg2, e)[1], to = ends(gg2, e)[2])$res) } )
all_shortest_paths(gg, from = ends(gg2, E(gg2)[1])[1], to = ends(gg2, E(gg2)[1])[2])$res
all_shortest_paths(gg, from = ends(gg2, E(gg2)[1])[1], to = ends(gg2, E(gg2)[1])[2])
all_shortest_paths(gg, from = ends(gg2, E(gg2)[1])[1], to = ends(gg2, E(gg2)[1])[2])$res
prueba <- all_shortest_paths(gg, from = ends(gg2, E(gg2)[1])[1], to = ends(gg2, E(gg2)[1])[2])$res
View(prueba)
table(E(gg3)$weight)
library(igraph)
rm(list = ls())
setwd("C:/Users/Javier/Documents/masterAFI/18. Analisis de Grafos/01. Redes sociales/practica/")
dd <- read.csv("red_contactos.csv", sep = ";")
gg <- graph.data.frame(dd, directed = FALSE)
summary(gg)
vcount(gg)
ecount(gg)
gg2 <- simplify(gg, remove.multiple = TRUE, remove.loops = TRUE)
E(gg2)$weight = sapply(E(gg2), function(e) {
length(all_shortest_paths(gg, from = ends(gg2, e)[1], to = ends(gg2, e)[2])$res) } )
summary(gg)
table(E(gg2)$weight)
is.connected(gg2) # es conexo?
ccs <- components(gg2)
id_compmayor <- which.max(ccs$csize) # mayor componente conexa
vids <- ccs$membership == id_compmayor
vids <- which(ccs$membership == id_compmayor) #nodos de la comp conexa mayor
gg3 <- induced_subgraph(gg2, vids = vids ) #subbgrafo solamente con estos nodos
summary(gg3)
### Inserta aqui tu codigo
### Inserta aqui tu codigo
### Inserta aqui tu codigo
### Inserta aqui tu codigo
ccs$csize
ccs$csize
ccs
ccs$csize
# grado medio
mean(degree(gg3))
degree(gg3)
# grado medio
mean(degree(gg3))
# distancia media
(average.path.length(gg3))
# distancia media
average.path.length(gg3)
?average.path.length
# diámetro
diameter(gg3)
?diameter
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
fit1 <- fit_power_law(d+1, 10)
fit1 <- fit_power_law(gg3+1, 10)
fit1 <- fit_power_law(gg3, 10)
fit1 <- fit_power_law(gg3)
summary(gg3)
d <- degree(gg3)
fit1 <- fit_power_law(d, 10)
d
summary(d)
summary(fit1)
summary(fit1)
fit1
?fit_power_law
fit1 <- fit_power_law(d)
fit1
?degree_distribution
d
d <- degree_distribution(gg3)
d <- degree_distribution(gg3)
d
deg_dist <- degree_distribution(gg3, cumulative = FALSE)
deg_dist <- degree_distribution(gg3)
?fit_power_law
fit1 <- fit_power_law(deg_dist)
fit <- fit_power_law(d)
d <- degree(gg3)
fit <- fit_power_law(d)
fit
fit1
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#b00606")
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#b00606")
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(d,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(deg_dist,
# log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
deg_dist <- degree_distribution(gg3) + 1
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
deg_dist
# plot the degree distribution on a log-log plot
plot(d,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
d <- degree(gg3)
fit <- fit_power_law(d)
deg_dist <- degree_distribution(gg3) + 0.0001
fit1 <- fit_power_law(deg_dist)
# plot the degree distribution on a log-log plot
plot(d,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(degree_distribution,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# plot the degree distribution on a log-log plot
plot(degree_distribution,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# plot the degree distribution on a log-log plot
plot(deg_dist,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
table(d)
table(deg_dist)
# plot the degree distribution on a log-log plot
plot(deg_dist + 0.0001,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
d <- degree(gg3)
fit <- fit_power_law(d)
deg_dist <- degree_distribution(gg3)
fit1 <- fit_power_law(deg_dist)
# plot the degree distribution on a log-log plot
plot(deg_dist + 0.0001,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit1$alpha,
col="#b00606")
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
deg_dist
table(deg_dist)
seq(deg_dist)
deg_dist
seq(deg_dist)^-fit1$alpha
# plot the degree distribution on a log-log plot
plot(d + 0.0001,
#log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(d),
seq(d)^-fit1$alpha,
col="#b00606")
lines(seq(d),
seq(d)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(d, #+ 0.0001,
#log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(d),
seq(d)^-fit1$alpha,
col="#b00606")
lines(seq(d),
seq(d)^-fit$alpha,
col="#000066")
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
deg_dist <- degree_distribution(gg3)
fit <- fit_power_law(deg_dist)
# plot the degree distribution on a log-log plot
plot(deg_dist + 0.0001,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="#000066")
# plot the degree distribution on a log-log plot
plot(deg_dist + 0.0001,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="red")
library(igraph)
rm(list = ls())
setwd("C:/Users/Javier/Documents/masterAFI/18. Analisis de Grafos/01. Redes sociales/practica/")
dd <- read.csv("red_contactos.csv", sep = ";")
gg <- graph.data.frame(dd, directed = FALSE)
summary(gg)
vcount(gg)
ecount(gg)
gg2 <- simplify(gg, remove.multiple = TRUE, remove.loops = TRUE)
E(gg2)$weight = sapply(E(gg2), function(e) {
length(all_shortest_paths(gg, from = ends(gg2, e)[1], to = ends(gg2, e)[2])$res) } )
summary(gg)
table(E(gg2)$weight)
is.connected(gg2) # es conexo?
ccs <- components(gg2)
ccs$csize
id_compmayor <- which.max(ccs$csize) # mayor componente conexa
vids <- ccs$membership == id_compmayor
vids <- which(ccs$membership == id_compmayor) #nodos de la comp conexa mayor
gg3 <- induced_subgraph(gg2, vids = vids ) #subbgrafo solamente con estos nodos
summary(gg3)
# grado medio
mean(degree(gg3))
# distancia media
average.path.length(gg3)
# diámetro
diameter(gg3)
# Distribución de grados y ajuste a una Power-Law
graph.density(gg3)
deg_dist <- degree_distribution(gg3)
fit <- fit_power_law(deg_dist)
fit
# plot the degree distribution on a log-log plot
plot(deg_dist + 0.0001,
log = "xy",
xlab = "Node Degree",
ylab = "Probability")
# add the fitted power law line; the exponent value comes from alpha, part of
# the output of the fit.power.law() function.
lines(seq(deg_dist),
seq(deg_dist)^-fit$alpha,
col="red")
# Clustering
mean(degree(gg3))
# grado medio
mean(degree(gg3))
### Inserta aqui tu codigo
### Inserta aqui tu codigo
### Inserta aqui tu codigo
# Entropía de los nodos
diversity(gg3)
# Entropía de los nodos Shannon
mean(diversity(gg3))
?degree
# Centralidad de los nodos y comparación con métricas de grado y clustering
Degree <- degree(gg3)
Eig <- evcent(gg3)$vector
Closeness <- closeness(gg3)
Betweenness <- betweenness(g)
# Centralidad de los nodos y comparación con métricas de grado y clustering
Degree <- degree(gg3)
Eig <- evcent(gg3)$vector
Closeness <- closeness(gg3)
Betweenness <- betweenness(gg3)
centralities <- cbind(Degree, Eig, Closeness, Betweenness)
round(cor(centralities), 2)
mean(Eig)
#### infomap, fastgreedy, label propagation, walktrap
comms_infomap <- infomap.community(gg3)
comms_walktrap <- walktrap.community(gg3)
comms_infomap$membership
#### infomap, fastgreedy, label propagation, walktrap
# comms_infomap <- infomap.community(gg3)
# comms_walktrap <- walktrap.community(gg3)
modularity(comms_infomap)
modularity(comms_walktrap)
ll <- layout_with_lgl(gg3, maxiter=30)
palcol <- rainbow(n=max(comms_infomap$membership))
plot(gg3,
layout = ll,
vertex.label='',
edge.arrow.size=0,
vertex.size=log(degree(g2)),
vertex.color=palcol[comms$membership])
ll <- layout_with_lgl(gg3, maxiter=30)
palcol <- rainbow(n=max(comms_infomap$membership))
plot(gg3,
layout = ll,
vertex.label='',
edge.arrow.size=0,
vertex.size=log(degree(gg3)),
vertex.color=palcol[comms$membership])
ll <- layout_with_lgl(gg3, maxiter=30)
palcol <- rainbow(n=max(comms_infomap$membership))
plot(gg3,
layout = ll,
vertex.label='',
edge.arrow.size=0,
vertex.size=log(degree(gg3)),
vertex.color=palcol[comms_infomap$membership])
ll <- layout_with_lgl(gg3, maxiter=30)
palcol <- rainbow(n=max(comms_infomap$membership))
plot(gg3,
layout = ll,
vertex.label='',
vertex.size=log(degree(gg3)),
vertex.color=palcol[comms_infomap$membership])
?layout_with_lgl
ll <- layout_with_lgl(gg3)
palcol <- rainbow(n=max(comms_infomap$membership))
plot(gg3,
layout = ll,
vertex.label='',
vertex.size=log(degree(gg3)),
vertex.color=palcol[comms_infomap$membership])
table(comms_infomap$membership)
summary(comms_infomap)
