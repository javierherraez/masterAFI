install.packages("xml2")
library(dplyr)
library(caret)
library(cluster)
library(vegan)
library(dplyr)
library(factoextra)
rm(list = ls())
setwd("C:/Users/jherraez/Documents/masterAFI/11. Aprendizaje supervisado I/01. Aprendizaje Estadístico Supervisado/Ejercicio Final")
setwd("C:/Users/Javier/Documents/masterAFI/11. Aprendizaje supervisado I/01. Aprendizaje Estadístico Supervisado/Ejercicio Final")
cancer_df <- read.csv("BreastCancerData.csv", na.strings = 100, stringsAsFactors = T)
target <- colnames(cancer_df)[ncol(cancer_df)]
target
table(cancer_df[, target])
colnames(cancer_df)[ncol(cancer_df)] <- "Relapse"
levels(cancer_df$Relapse) <- c("No", "Yes")
hist(rowSums(is.na(cancer_df)))
table(rowSums(is.na(cancer_df)))
hist(colSums(is.na(cancer_df)))
table(colSums(is.na(cancer_df)))
#borrar columnas con todos missing values
nasColumns <- sapply(cancer_df, function(x) all(is.na(x)))
cancer_df <- cancer_df[, !(nasColumns)]
table(rowSums(is.na(cancer_df)))
table(colSums(is.na(cancer_df)))
cancer_df <- cancer_df[!(rowSums(is.na(cancer_df)) > 10000),]
row.names(cancer_df) <- 1:nrow(cancer_df)
table(colSums(is.na(cancer_df)))
nasColumns_2 <- sapply(cancer_df, function(x) any(is.na(x)))
cancer_df <- cancer_df[, !(nasColumns_2)]
table(colSums(is.na(cancer_df)))
genes <- cancer_df[,1:ncol(cancer_df) - 1]
genes_traspose <- as.data.frame(t(genes))
set.seed(1404)
samples <- createDataPartition(genes_traspose$`1`, p = 0.1, list = FALSE)
genes_traspose.subset  <- genes_traspose[samples, ]
# fviz_nbclust(genes_traspose.subset, pam, method="wss", k.max = 50) + theme_classic()
# "wss" (for total within sum of square)
pm <- eclust(genes_traspose.subset, FUNcluster="pam", k = 30, hc_metric = "euclidean", hc_method = "ward.D2", graph = F)
medoids <- rownames(pm$medoids)
cancer_clustering <- cancer_df[, c(medoids, "Relapse")]
rdaFitClust <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0.1, 1, .1), lambda = seq(0.1, 1, .1)),
metric = "Kappa",
data = cancer_clustering,
trControl = trainControl(method = "cv", number = 5, classProbs = TRUE),
preProcess = c("center", "scale")
)
rdaFitClust
# gamma = 0.8 and lambda = 0.4.
accuracy <- c()
for (i in 1:10){
d <- createDataPartition(cancer_clustering$Relapse, p = 0.8, list = FALSE)
# select training sample
train <- cancer_clustering[d,]
test  <- cancer_clustering[-d,]
rdaFitClust <- train(Relapse ~ .,
method = "rda",
tuneGrid = data.frame(gamma = 0.8, lambda = 0.4),
metric = "Kappa",
data = train,
trControl = trainControl(method = "none", classProbs = TRUE),
preProcess = c("center", "scale")
)
rdaPred = predict(rdaFitClust, test)
CM = confusionMatrix(factor(rdaPred), test$Relapse)
accuracy <- c(accuracy,  unname(CM$overall['Accuracy']))
}
mean(accuracy)
cost.unit <- c(0, 1, 1.5, 0)
cost.i = matrix(NA, nrow = 50, ncol = 10)
PnoRno = matrix(NA, nrow = 50, ncol = 10)
PnoRyes = matrix(NA, nrow = 50, ncol = 10)
PyesRno = matrix(NA, nrow = 50, ncol = 10)
PyesRyes = matrix(NA, nrow = 50, ncol = 10)
accuracy = matrix(NA, nrow = 50, ncol = 10)
# 50 replicates for training/testing sets for each of the 10 values of threshold
j <- 0
for (threshold in seq(0.05,0.5,0.05)){
j <- j + 1
cat(j)
for(i in 1:50){
# partition data intro training (70%) and testing sets (20%)
d <- createDataPartition(cancer_clustering$Relapse, p = 0.7, list = FALSE)
# select training sample
train <- cancer_clustering[d,]
test  <- cancer_clustering[-d,]
rdaFit <- train(Relapse ~ ., data = train, method = "rda",
tuneGrid = data.frame(gamma = 0.8, lambda = 0.4),
preProcess = c("center", "scale"),
trControl = trainControl(method = "none", classProbs = TRUE))
rdaProb = predict(rdaFit, test, type="prob")
rdaPred = rep("No", nrow(test))
rdaPred[which(rdaProb[,2] > threshold)] = "Yes"
CM = confusionMatrix(factor(rdaPred), test$Relapse)
accuracy[i,j] <- unname(CM$overall['Accuracy'])
CM <- CM$table
cost = sum(as.vector(CM)*cost.unit)/sum(CM)
cost.i[i,j] <- cost
PnoRno[i,j] <- CM[1,1]/sum(CM)
PnoRyes[i,j] <- CM[1,2]/sum(CM)
PyesRno[i,j] <- CM[2,1]/sum(CM)
PyesRyes[i,j] <- CM[1,2]/sum(CM)
}
}
boxplot(cost.i, main = "Threshold selection",
ylab = "unit cost",
xlab = "threshold value",
names = seq(0.05,0.5,0.05),col="royalblue2",las=2)
mean(accuracy[,1])
matrix(c(mean(PnoRno[,1]), mean(PyesRno[,1]), mean(PnoRyes[,1]), mean(PyesRyes[,1])), nrow=2, ncol=2)
