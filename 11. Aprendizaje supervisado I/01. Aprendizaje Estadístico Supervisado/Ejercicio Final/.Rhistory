require("knitr")
library("caret")
library("dplyr")
opts_knit$set(root.dir = "C:/Proyectos/AFI/cursos_20212022/Regular")
# setwd("C:/Proyectos/AFI/cursos_20212022/Regular")
setwd("C:/Users/jherraez/Documents/masterAFI/09. Aprendizaje no supervisado/01. Clustering jerarquico y no jerarquico/")
####################
# Lectura de datos #
####################
datosBanca <- read.csv("Data/datosBanca.csv", header = TRUE, sep=",")
set.seed(1404)
datosBanca <- datosBanca[sample(nrow(datosBanca), nrow(datosBanca) * 0.8), ]
rownames(datosBanca) <- 1:nrow(datosBanca)
summary(datosBanca)
# Estandarización mediante discretización
# install.packages("nima")
library(nima)
datosBanca$checkingAccount_CAT <- discrete_by_quantile(datosBanca$checkingAccount)/4
datosBanca$deposit_CAT <- discrete_by_quantile(datosBanca$deposit)/4
datosBanca$shareOfStock_CAT <- discrete_by_quantile(datosBanca$shareOfStock)/4
datosBanca$pensionPlan_CAT <- discrete_by_quantile(datosBanca$pensionPlan)/4
#datosBanca$mortgage_CAT<-discrete_by_quantile(datosBanca$mortgage)/4
# Como da un error, la asignamos con IF
summary(datosBanca$mortgage)
datosBanca$mortgage_CAT <- datosBanca$mortgage
datosBanca$mortgage_CAT <- ifelse(datosBanca$mortgage <= 0, 1, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(0<datosBanca$mortgage & datosBanca$mortgage<= 45104, 2, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(45104<datosBanca$mortgage & datosBanca$mortgage<= 125979, 3, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- ifelse(125979<datosBanca$mortgage, 4, datosBanca$mortgage_CAT)
datosBanca$mortgage_CAT <- datosBanca$mortgage_CAT/4
summary(datosBanca$mortgage_CAT)
datosBanca$loan_CAT<-discrete_by_quantile(datosBanca$loan)/4
datosBanca$cards_CAT<-discrete_by_quantile(datosBanca$cards)/4
datosBanca$insurance_CAT<-discrete_by_quantile(datosBanca$insurance)/4
datosBanca$billPayment_CAT<-discrete_by_quantile(datosBanca$billPayment)/4
# La domiciliación de nómina es binaria y no es preciso estandarizarla
# Importante hacerla numérica porque si no, la considera integer y su AVERAGE vía SQL devuelve 0
datosBanca$salary_CAT<-as.numeric(datosBanca$salary)
summary(datosBanca)
# Cambiar missings por 0 #
datosBanca$checkingAccount_CAT[is.na(datosBanca$checkingAccount_CAT)]<-0
datosBanca$deposit_CAT[is.na(datosBanca$deposit_CAT)]<-0
datosBanca$shareOfStock_CAT[is.na(datosBanca$shareOfStock_CAT)]<-0
datosBanca$pensionPlan_CAT[is.na(datosBanca$pensionPlan_CAT)]<-0
datosBanca$mortgage_CAT[is.na(datosBanca$mortgage_CAT)]<-0
datosBanca$loan_CAT[is.na(datosBanca$loan_CAT)]<-0
datosBanca$cards_CAT[is.na(datosBanca$cards_CAT)]<-0
datosBanca$insurance_CAT[is.na(datosBanca$insurance_CAT)]<-0
datosBanca$billPayment_CAT[is.na(datosBanca$billPayment_CAT)]<-0
datosBanca.cat <- datosBanca %>%
select(ends_with('_CAT'))
library(cluster)
library(factoextra)
library(vegan)
datosBanca.cat.subset <- datosBanca.cat[sample(nrow(datosBanca.cat), nrow(datosBanca.cat) * 0.1), ]
matrizDistancias <- vegdist(datosBanca.cat, method = "euclidean")
datosBanca.cat.subset <- datosBanca.cat[sample(nrow(datosBanca.cat), nrow(datosBanca.cat) * 0.1), ]
matrizDistancias <- vegdist(datosBanca.cat.subset, method = "euclidean")
clusterJerarquico <- hclust(matrizDistancias, method="ward.D2")
plot(as.dendrogram(clusterJerarquico),  main = "Dendrograma")
library(dendextend)
plot(as.dendrogram(clusterJerarquico),  main = "Dendrograma")
rect.hclust(clusterJerarquico, k=2, border="red")
rect.hclust(clusterJerarquico, k=3, border="blue")
rect.hclust(clusterJerarquico, k=4, border="green")
rect.hclust(clusterJerarquico, k=5, border="yellow")
rect.hclust(clusterJerarquico, k=6, border="purple")
rect.hclust(clusterJerarquico, k=7, border="gray")
rect.hclust(clusterJerarquico, k=8, border="black")
datosBanca.cat.subset <- datosBanca.cat[sample(nrow(datosBanca.cat), nrow(datosBanca.cat) * 0.1), ]
rownames(datosBanca.cat.subset) <- 1:nrow(datosBanca.cat.subset)
matrizDistancias <- vegdist(datosBanca.cat.subset, method = "euclidean")
plot(as.dendrogram(clusterJerarquico),  main = "Dendrograma")
rect.hclust(clusterJerarquico, k=2, border="red")
rect.hclust(clusterJerarquico, k=3, border="blue")
rect.hclust(clusterJerarquico, k=4, border="green")
rect.hclust(clusterJerarquico, k=5, border="yellow")
rect.hclust(clusterJerarquico, k=6, border="purple")
rect.hclust(clusterJerarquico, k=7, border="gray")
rect.hclust(clusterJerarquico, k=8, border="black")
dend <- as.dendrogram(clusterJerarquico)
dend <- color_branches(dend, k=4)
plot(dend)
library(dplyr)
library(caret)
rm(list = ls())
setwd("C:/Users/jherraez/Documents/masterAFI/11. Aprendizaje supervisado I/01. Aprendizaje Estadístico Supervisado/Ejercicio Final")
df <- read.csv("BreastCancerData.csv", na.strings = 100)
target <- colnames(df)[ncol(df)]
target
table(df[, target])
hist(rowSums(is.na(df)))
table(rowSums(is.na(df)))
hist(colSums(is.na(df)))
table(colSums(is.na(df)))
#borrar columnas con todos missing values
nasColumns <- sapply(df, function(x) all(is.na(x)))
df <- df[, !(nasColumns)]
table(rowSums(is.na(df)))
table(colSums(is.na(df)))
df <- df[!(rowSums(is.na(df)) > 10000),]
table(colSums(is.na(df)))
nasColumns_2 <- sapply(df, function(x) any(is.na(x)))
df <- df[, !(nasColumns_2)]
table(colSums(is.na(df)))
genes <- df[, 1:ncol(df)-1]
pca = prcomp(genes, scale=T)
summary(pca)
ctrl <- trainControl(method = "cv", number = 5,
classProbs = TRUE,
#verboseIter=T,
)
pre <- preProcess(df[,1:ncol(df) - 1], method = c("scale","pca"), thresh=0.7)
df_pca <- predict(pre, df)
df_pca$Class <- as.factor(df_pca$Class)
levels(df_pca$Class) <- c("No", "Yes")
rdaFit <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df_pca,
trControl = ctrl)
ctrl2 = trainControl(method = "cv", number = 5, classProbs = TRUE, preProcOptions = list(thresh = 0.7))
ctrl2
rdaFit2 <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df_pca,
trControl = ctrl2,
preProcess = c('scale','pca'))
rdaFit2 <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df,
trControl = ctrl2,
preProcess = c('scale','pca'))
str(df$Class)
df2 <- df
df2$Class <- as.factor(df2$Class)
df2$Class
levels(df2$Class)
levels(df2$Class) <- c("No", "Yes")
df2$Class
rdaFit2 <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df2,
trControl = ctrl2,
preProcess = c('scale','pca'))
rdaFit2 <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df2,
trControl = ctrl2,
preProcess = c('pca'))
ctrl2 = trainControl(method = "cv", number = 5, classProbs = TRUE, preProcOptions = list(thresh = 0.5))
rdaFit2 <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = df2,
trControl = ctrl2,
preProcess = c('pca'))
?trainControl
df <- read.csv("BreastCancerData.csv", na.strings = 100, stringsAsFactors = T)
levels(df$Class)
colnames(df)['Class']
colnames(df)[ncol(df)]
colnames(df)[which(names(df) == "col1")]
colnames(df)[which(names(df) == "Class")]
colnames(df)[which(names(df) == "Class")] <- "Relapse"
colnames(df)[ncol(df)]
genes <- read.csv("BreastCancerData.csv", na.strings = 100, stringsAsFactors = T)
rm(list = ls())
rm(list = ls())
setwd("C:/Users/jherraez/Documents/masterAFI/11. Aprendizaje supervisado I/01. Aprendizaje Estadístico Supervisado/Ejercicio Final")
genes <- read.csv("BreastCancerData.csv", na.strings = 100, stringsAsFactors = T)
target <- colnames(genes)[ncol(genes)]
target
table(genes[, target])
colnames(df)[which(names(df) == target)] <- "Relapse"
colnames(genes)[ncol(genes)] <- "Relapse"
levels(genes$Relapse) <- c("No", "Yes")
hist(rowSums(is.na(genes)))
table(rowSums(is.na(genes)))
hist(colSums(is.na(genes)))
table(colSums(is.na(genes)))
nasColumns <- sapply(genes, function(x) all(is.na(x)))
genes <- genes[, !(nasColumns)]
table(rowSums(is.na(genes)))
table(colSums(is.na(genes)))
genes <- genes[!(rowSums(is.na(genes)) > 10000),]
table(colSums(is.na(genes)))
nasColumns_2 <- sapply(genes, function(x) any(is.na(x)))
genes <- genes[, !(nasColumns_2)]
table(colSums(is.na(genes)))
genes <- genes[, 1:ncol(genes)-1]
pca = prcomp(genes, scale=T)
summary(pca)
ctrl <- trainControl(method = "cv", number = 5,
classProbs = TRUE,
#verboseIter=T,
)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("scale","pca"), thresh=0.7)
genes_pca <- predict(pre, genes)
rdaFit <- train(Class ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes_pca,
trControl = ctrl)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes_pca,
trControl = ctrl)
genes_pca
View(genes_pca)
pre
genes[,1:ncol(genes) - 1]
genes_pca <- predict(pre, genes)
View(genes)
genes_pca
colnames(genes)[ncol(genes)]
genes <- read.csv("BreastCancerData.csv", na.strings = 100, stringsAsFactors = T)
target <- colnames(genes)[ncol(genes)]
target
table(genes[, target])
colnames(genes)[ncol(genes)] <- "Relapse"
colnames(genes)[ncol(genes)]
levels(genes$Relapse) <- c("No", "Yes")
levels(genes$Relapse)
str(genes$Relapse)
hist(rowSums(is.na(genes)))
table(rowSums(is.na(genes)))
hist(colSums(is.na(genes)))
table(colSums(is.na(genes)))
nasColumns <- sapply(genes, function(x) all(is.na(x)))
genes <- genes[, !(nasColumns)]
table(rowSums(is.na(genes)))
table(colSums(is.na(genes)))
levels(genes$Relapse)
genes <- genes[!(rowSums(is.na(genes)) > 10000),]
table(colSums(is.na(genes)))
nasColumns_2 <- sapply(genes, function(x) any(is.na(x)))
genes <- genes[, !(nasColumns_2)]
table(colSums(is.na(genes)))
genes_pca <- genes[, 1:ncol(genes)-1]
pca = prcomp(genes_pca, scale=T)
summary(pca)
ctrl <- trainControl(method = "cv", number = 5,
classProbs = TRUE,
#verboseIter=T,
)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("scale","pca"), thresh=0.7)
genes_pca <- predict(pre, genes)
genes_pca
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes_pca,
trControl = ctrl)
rdaFit
genes2 <- genes
genes2$Class <- as.factor(genes2$Class)
rdaFit2 <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes2,
trControl = ctrl2,
preProcess = c('pca'))
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh=0.7)
genes_pca <- predict(pre, genes)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes_pca,
trControl = ctrl)
rdaFit
ctrl <- trainControl(method = "cv",
number = 5,
classProbs = TRUE
)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh=0.7)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
ctrl2 = trainControl(method = "cv",
number = 5,
classProbs = TRUE,
preProcOptions = list(thresh = 0.5))
rdaFit2 <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes,
trControl = ctrl2,
preProcess = c('pca'))
ctrl2 = trainControl(method = "cv",
number = 5,
classProbs = TRUE,
preProcOptions = list(thresh = 0.1))
rdaFit2 <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = genes,
trControl = ctrl2,
preProcess = c('pca'))
rdaFit$preProcess
View(rdaFit)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh = 0.8)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh = 0.9)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh = 0.95)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0, 1, 0.2), lambda = seq(0, 1, .2)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
warnings()
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0.1, 1, 0.1), lambda = seq(0.1, 1, .1)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
rdaFit
pre <- preProcess(genes[,1:ncol(genes) - 1], method = c("pca"), thresh = 0.9)
rdaFit <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0.1, 1, 0.1), lambda = seq(0.1, 1, .1)),
metric = "Kappa",
data = predict(pre, genes),
trControl = ctrl)
rdaFit
ctrl2 = trainControl(method = "cv",
number = 5,
classProbs = TRUE,
preProcOptions = list(thresh = 0.9))
rdaFit2 <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0.1, 1, 0.1), lambda = seq(0.1, 1, .1)),
metric = "Kappa",
data = genes,
trControl = ctrl2,
preProcess = c('pca'))
rdaPred = predict(rdaFit, genes)
rdaFit
ctrl2 = trainControl(method = "cv",
number = 5,
classProbs = TRUE,
preProcOptions = list(thresh = 0.9))
rdaFit2 <- train(Relapse ~ .,
method = "rda",
tuneGrid = expand.grid(gamma = seq(0.1, 1, .1), lambda = seq(0.1, 1, .1)),
metric = "Kappa",
data = genes,
trControl = ctrl2,
preProcess = c('pca'))
genes_traspose <- as.data.frame(t(as.matrix(genes)))
genes_traspose
kmax <- ncol(genes_traspose)
asw <- numeric(kmax)
for(k in 2:kmax){
sil <- silhouette(cutree(clusterJerarquico, k = k), matrizDistancias)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
plot(1:kmax, asw, type="h",
main = "Silhouette-optimal number of clusters",
xlab = "k (number of groups)", ylab = "Average silhouette width")
axis(1, k.best, paste("optimum", k.best, sep = "\n"), col = "red", font = 2,
col.axis = "red")
points(k.best, max(asw), pch = 16, col = "red", cex = 1.5)
library(cluster)
genes_traspose <- as.data.frame(t(as.matrix(genes)))
kmax <- ncol(genes_traspose)
asw <- numeric(kmax)
for(k in 2:kmax){
sil <- silhouette(cutree(clusterJerarquico, k = k), matrizDistancias)
asw[k] <- summary(sil)$avg.width
}
matrizDistancias <- vegdist(genes_traspose, method = "euclidean")
clusterJerarquico <- hclust(matrizDistancias, method="ward.D2")
library(vegan)
matrizDistancias <- vegdist(genes_traspose, method = "euclidean")
genes_traspose.genes <- genes_traspose[,1:nrow(genes_traspose) - 1]
genes_traspose.genes <- genes_traspose[1:nrow(genes_traspose) - 1,]
matrizDistancias <- vegdist(genes_traspose.genes, method = "euclidean")
genes_traspose.genes
View(genes_traspose)
View(genes_traspose.genes)
matrizDistancias <- vegdist(genes_traspose.genes, method = "euclidean")
kmax <- ncol(genes_traspose.genes)
asw <- numeric(kmax)
matrizDistancias <- vegdist(genes_traspose.genes, method = "euclidean")
str(genes_traspose.genes)
genes_traspose.genes <- as.numeric(genes_traspose.genes)
sapply(genes_traspose.genes, as.numeric)
genes_traspose.genes <- sapply(genes_traspose.genes, as.numeric)
matrizDistancias <- vegdist(genes_traspose.genes, method = "euclidean")
clusterJerarquico <- hclust(matrizDistancias, method="ward.D2")
kmax <- ncol(genes_traspose.genes)
asw <- numeric(kmax)
for(k in 2:kmax){
sil <- silhouette(cutree(clusterJerarquico, k = k), matrizDistancias)
asw[k] <- summary(sil)$avg.width
}
k.best <- which.max(asw)
plot(1:kmax, asw, type="h",
main = "Silhouette-optimal number of clusters",
xlab = "k (number of groups)", ylab = "Average silhouette width")
axis(1, k.best, paste("optimum", k.best, sep = "\n"), col = "red", font = 2,
col.axis = "red")
points(k.best, max(asw), pch = 16, col = "red", cex = 1.5)
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
asignacionJerarquica
colnames(asignacionJerarquica)[11] <- "cluster"
genes_traspose.genes %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
library(dplyr)
genes_traspose.genes %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
genes_traspose.genes <- as.data.frame(genes_traspose[1:nrow(genes_traspose) - 1,])
genes_traspose.genes <- sapply(genes_traspose.genes, as.numeric)
genes_traspose.genes <- as.data.frame(genes_traspose[1:nrow(genes_traspose) - 1,])
str(genes_traspose.genes)
genes_traspose.genes <- lapply(genes_traspose.genes, as.numeric)
str(genes_traspose.genes)
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
genes_traspose.genes <- sapply(genes_traspose.genes, as.numeric)
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
colnames(asignacionJerarquica)[11] <- "cluster"
genes_traspose.genes <- lapply(genes_traspose.genes, as.numeric)
genes_traspose.genes %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
asignacionJerarquica %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
asignacionJerarquica
colnames(asignacionJerarquica)[11] <- "cluster"
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
colnames(asignacionJerarquica)[98] <- "cluster"
colnames(asignacionJerarquica)[97] <- "cluster"
asignacionJerarquica
genes_traspose.genes
genes_traspose.genes <- lapply(genes_traspose.genes, as.numeric)
genes_traspose.genes
genes_traspose.genes <- as.data.frame(genes_traspose[1:nrow(genes_traspose) - 1,])
genes_traspose.genes
genes_traspose.genes <- lapply(genes_traspose.genes, as.numeric)
genes_traspose.genes
genes_traspose.genes <- sapply(genes_traspose.genes, as.numeric)
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
asignacionJerarquica
colnames(asignacionJerarquica)[98] <- "cluster"
asignacionJerarquica
colnames(asignacionJerarquica)
colnames(asignacionJerarquica)[98] <- "cluster"
colnames(asignacionJerarquica)[98]
colnames(asignacionJerarquica)[98] <- "cluster"
colnames(asignacionJerarquica)[97]
colnames(asignacionJerarquica)[96]
colnames(asignacionJerarquica)
colnames(asignacionJerarquica)[0]
colnames(asignacionJerarquica)[1]
colnames(asignacionJerarquica)[40]
colnames(asignacionJerarquica)[20]
row.names(genes) <- 1:nrow(genes)
genes_traspose <- as.data.frame(t(as.matrix(genes)))
genes_traspose.genes <- as.data.frame(genes_traspose[1:nrow(genes_traspose) - 1,])
genes_traspose.genes <- sapply(genes_traspose.genes, as.numeric)
colnames(asignacionJerarquica)[97]
asignacionJerarquica <- cbind(genes_traspose.genes, cutree(clusterJerarquico, k = 4))
colnames(asignacionJerarquica)[97]
colnames(asignacionJerarquica)
colnames(asignacionJerarquica)[97] <- "cluster"
asignacionJerarquica %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
as.data.frame(asignacionJerarquica) %>% group_by(cluster) %>% summarise(across(everything(), list(mean)))
