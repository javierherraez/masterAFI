library(dplyr)
library(GGally) # ggplot2-based visualization of correlations
library(leaps)
library(lmtest)
library(regclass)
library(nortest)
library(car)
library(caret)
data(BostonHousing)
# Cantidad total de filas
nrow(BostonHousing)
# Cantidad total de columnas
ncol(BostonHousing)
# Nombres de columnas
colnames(BostonHousing)
head(BostonHousing)
str(BostonHousing)
summary(BostonHousing)
count(BostonHousing[duplicated(BostonHousing),])
for(i in 1:ncol(BostonHousing)){
if(colnames(BostonHousing)[i] != "medv"){
plot(BostonHousing[,i], BostonHousing$medv, type='p', xlab=names(BostonHousing)[i], ylab="medv")
}
}
hist(BostonHousing$medv, breaks = 20)
ggcorr(BostonHousing, label = TRUE)
model <- regsubsets(medv ~ . , data = BostonHousing, nvmax = ncol(BostonHousing))
model_sumary <- summary(model)
model_sumary
# R2
plot(model_sumary$rsq, xlab = "Numero de variables", ylab = "R2", type = "b")
text(model_sumary$rsq,
labels = round(model_sumary$rsq, 4),
cex = 0.6, pos = 4, col = "red")
# R2 ajustado
plot(model_sumary$adjr2, xlab = "Numero de variables", ylab = "R2 ajustado", type = "b")
text(model_sumary$adjr2,
labels = round(model_sumary$adjr2, 4),
cex = 0.6, pos = 4, col = "red")
# BIC
plot(model_sumary$bic, xlab = "Numero de variables", ylab = "BIC", type = "b")
text(model_sumary$bic,
labels = round(model_sumary$bic, 4),
cex = 0.6, pos = 4, col = "red")
# Cp Mallows
plot(model_sumary$cp, xlab = "Numero de variables", ylab = "Cp", type = "b")
text(model_sumary$cp,
labels = round(model_sumary$cp, 4),
cex = 0.6, pos = 4, col = "red")
# AIC
n <- nrow(BostonHousing)
p <- apply(model_sumary$which, 1, sum)
aic <- model_sumary$bic - log(n) * p + 2 * p
plot(aic, xlab = "Numero de variables", ylab = "AIC", type = "b")
text(aic,
labels = round(aic, 4),
cex = 0.6, pos = 4, col = "red")
lm_medv <- lm(medv ~ crim + zn + chas + nox + rm + dis + rad + tax + ptratio + b + lstat, data = BostonHousing)
summary(lm_medv)
plot(BostonHousing$medv, lm_medv$residuals, xlab='medv', ylab='residuals')
boxplot(lm_medv$residuals)
plot(1/BostonHousing$lstat, BostonHousing$medv, type='p', xlab="1/lstat", ylab="medv")
lm_medv_inv_lstat <- update(lm_medv, . ~ . + I(1/lstat))
summary(lm_medv_inv_lstat)
lm_medv_inv_lstat <- update(lm_medv_inv_lstat, . ~ . - zn - chas)
summary(lm_medv_inv_lstat)
plot(BostonHousing$medv, lm_medv_inv_lstat$residuals, xlab='medv', ylab='residuals')
plot(hatvalues(lm_medv_inv_lstat))
cooksD <- cooks.distance(lm_medv_inv_lstat)
plot(cooksD, pch=20, main="Influential Obs by Cooks Distance")
abline(h = 4*mean(cooksD), col='red')
VIF(lm_medv_inv_lstat)
lm_medv_candidate <- update(lm_medv_inv_lstat, . ~ . - tax - lstat)
summary(lm_medv_candidate)
VIF(lm_medv_candidate)
crPlots(lm_medv_candidate)
plot(lm_medv_candidate)
raintest(lm_medv_candidate)
raintest(lm_medv)
raintest(lm_medv_inv_lstat)
t.test(lm_medv_candidate$residuals)
bptest(lm_medv_candidate)
dwtest(lm_medv_candidate)
shapiro.test(lm_medv_candidate$residuals)
ad.test(lm_medv_candidate$residuals)
err_lm_medv <- c()
err_lm_medv_inv_lstat <- c()
err_lm_medv_candidate <- c()
for(i in 1:nrow(BostonHousing)){
lm_medv.LOOCV <- update(lm_medv, data = BostonHousing[-i,])
lm_medv_inv_lstat.LOOCV <- update(lm_medv_inv_lstat, data = BostonHousing[-i,])
lm_medv_candidate.LOOCV <- update(lm_medv_candidate, data = BostonHousing[-i,])
err_lm_medv <- c(err_lm_medv, (BostonHousing$medv[i] - predict(lm_medv.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_inv_lstat <- c(err_lm_medv_inv_lstat,  (BostonHousing$medv[i] - predict(lm_medv_inv_lstat.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_candidate <- c(err_lm_medv_candidate,  (BostonHousing$medv[i] - predict(lm_medv_candidate.LOOCV, BostonHousing[i,]))**2)
}
mean(err_lm_medv)
mean(err_lm_medv_inv_lstat)
mean(err_lm_medv_candidate)
fold_index_list <- createFolds(BostonHousing$medv, k = 10)
mat <- matrix(nrow = 0, ncol = 6)
colnames(mat) <- c('mse_train_1', 'mse_test_1', 'mse_train_2', 'mse_test_2',
'mse_train_3', 'mse_test_3')
for(fold in fold_index_list){
training_data <- BostonHousing[-fold, ]
test_data <- BostonHousing[fold, ]
lm_medv.10_fold_CV <- update(lm_medv, data = training_data)
lm_medv_inv_lstat.10_fold_CV <- update(lm_medv_inv_lstat, data = training_data)
lm_medv_candidate.10_fold_CV <- update(lm_medv_candidate, data = training_data)
mse_train_1 <- mean((lm_medv.10_fold_CV$residuals)**2)
mse_train_2 <- mean((lm_medv_inv_lstat.10_fold_CV$residuals)**2)
mse_train_3 <- mean((lm_medv_candidate.10_fold_CV$residuals)**2)
mse_test_1 <- mean((test_data$medv - predict(lm_medv.10_fold_CV, test_data))**2)
mse_test_2 <- mean((test_data$medv - predict(lm_medv_inv_lstat.10_fold_CV, test_data))**2)
mse_test_3 <- mean((test_data$medv - predict(lm_medv_candidate.10_fold_CV, test_data))**2)
mat <- rbind(mat, c(mse_train_1,
mse_test_1,
mse_train_2,
mse_test_2,
mse_train_3,
mse_test_3))
}
mat <- as.data.frame(mat)
colMeans(mat)
fold_index_list <- createFolds(BostonHousing$medv, k = 10)
mat <- matrix(nrow = 0, ncol = 6)
colnames(mat) <- c('mse_train_lm_medv', 'mse_test_lm_medv', 'mse_train_lm_medv_inv_lstat', 'mse_test_lm_medv_inv_lstat',
'mse_train_lm_medv_candidate', 'mse_test_lm_medv_candidate')
for(fold in fold_index_list){
training_data <- BostonHousing[-fold, ]
test_data <- BostonHousing[fold, ]
lm_medv.10_fold_CV <- update(lm_medv, data = training_data)
lm_medv_inv_lstat.10_fold_CV <- update(lm_medv_inv_lstat, data = training_data)
lm_medv_candidate.10_fold_CV <- update(lm_medv_candidate, data = training_data)
mse_train_lm_medv <- mean((lm_medv.10_fold_CV$residuals)**2)
mse_train_lm_medv_inv_lstat <- mean((lm_medv_inv_lstat.10_fold_CV$residuals)**2)
mse_train_lm_medv_candidate <- mean((lm_medv_candidate.10_fold_CV$residuals)**2)
mse_test_lm_medv <- mean((test_data$medv - predict(lm_medv.10_fold_CV, test_data))**2)
mse_test_lm_medv_inv_lstat <- mean((test_data$medv - predict(lm_medv_inv_lstat.10_fold_CV, test_data))**2)
mse_test_lm_medv_candidate <- mean((test_data$medv - predict(lm_medv_candidate.10_fold_CV, test_data))**2)
mat <- rbind(mat, c(mse_train_lm_medv,
mse_test_lm_medv,
mse_train_lm_medv_inv_lstat,
mse_test_lm_medv_inv_lstat,
mse_train_lm_medv_candidate,
mse_test_lm_medv_candidate))
}
mat <- as.data.frame(mat)
colMeans(mat)
err_lm_medv <- c()
err_lm_medv_inv_lstat <- c()
err_lm_medv_candidate <- c()
for(i in 1:nrow(BostonHousing)){
lm_medv.LOOCV <- update(lm_medv, data = BostonHousing[-i,])
lm_medv_inv_lstat.LOOCV <- update(lm_medv_inv_lstat, data = BostonHousing[-i,])
lm_medv_candidate.LOOCV <- update(lm_medv_candidate, data = BostonHousing[-i,])
err_lm_medv <- c(err_lm_medv, (BostonHousing$medv[i] - predict(lm_medv.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_inv_lstat <- c(err_lm_medv_inv_lstat,  (BostonHousing$medv[i] - predict(lm_medv_inv_lstat.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_candidate <- c(err_lm_medv_candidate,  (BostonHousing$medv[i] - predict(lm_medv_candidate.LOOCV, BostonHousing[i,]))**2)
}
mean(err_lm_medv)
mean(err_lm_medv_inv_lstat)
mean(err_lm_medv_candidate)
err_lm_medv <- c()
err_lm_medv_inv_lstat <- c()
err_lm_medv_candidate <- c()
for(i in 1:nrow(BostonHousing)){
lm_medv.LOOCV <- update(lm_medv, data = BostonHousing[-i,])
lm_medv_inv_lstat.LOOCV <- update(lm_medv_inv_lstat, data = BostonHousing[-i,])
lm_medv_candidate.LOOCV <- update(lm_medv_candidate, data = BostonHousing[-i,])
err_lm_medv <- c(err_lm_medv, (BostonHousing$medv[i] - predict(lm_medv.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_inv_lstat <- c(err_lm_medv_inv_lstat,  (BostonHousing$medv[i] - predict(lm_medv_inv_lstat.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_candidate <- c(err_lm_medv_candidate,  (BostonHousing$medv[i] - predict(lm_medv_candidate.LOOCV, BostonHousing[i,]))**2)
}
mean(err_lm_medv)
mean(err_lm_medv_inv_lstat)
mean(err_lm_medv_candidate)
model <- train(mdv ~ ., trControl = trainControl(method = 'LOOCV'), method = 'lm')
model <- train(mdv ~ ., BostonHousing ,trControl = trainControl(method = 'LOOCV'), method = 'lm')
model <- train(medv ~ ., BostonHousing ,trControl = trainControl(method = 'LOOCV'), method = 'lm')
model
err_lm_medv <- c()
err_lm_medv_inv_lstat <- c()
err_lm_medv_candidate <- c()
for(i in 1:nrow(BostonHousing)){
lm_medv.LOOCV <- update(lm_medv, data = BostonHousing[-i,])
lm_medv_inv_lstat.LOOCV <- update(lm_medv_inv_lstat, data = BostonHousing[-i,])
lm_medv_candidate.LOOCV <- update(lm_medv_candidate, data = BostonHousing[-i,])
err_lm_medv <- c(err_lm_medv, (BostonHousing$medv[i] - predict(lm_medv.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_inv_lstat <- c(err_lm_medv_inv_lstat,  (BostonHousing$medv[i] - predict(lm_medv_inv_lstat.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_candidate <- c(err_lm_medv_candidate,  (BostonHousing$medv[i] - predict(lm_medv_candidate.LOOCV, BostonHousing[i,]))**2)
}
mean(err_lm_medv)
mean(err_lm_medv_inv_lstat)
mean(err_lm_medv_candidate)
model <- train(medv ~ ., BostonHousing ,trControl = trainControl(method = 'LOOCV'), method = 'lm')
model
summary(model)
err_lm_medv
err_lm_medv <- c()
err_lm_medv_inv_lstat <- c()
err_lm_medv_candidate <- c()
for(i in 1:nrow(BostonHousing)){
lm_medv.LOOCV <- update(lm_medv, data = BostonHousing[-i,])
lm_medv_inv_lstat.LOOCV <- update(lm_medv_inv_lstat, data = BostonHousing[-i,])
lm_medv_candidate.LOOCV <- update(lm_medv_candidate, data = BostonHousing[-i,])
err_lm_medv <- c(err_lm_medv, (BostonHousing$medv[i] - predict(lm_medv.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_inv_lstat <- c(err_lm_medv_inv_lstat,  (BostonHousing$medv[i] - predict(lm_medv_inv_lstat.LOOCV, BostonHousing[i,]))**2)
err_lm_medv_candidate <- c(err_lm_medv_candidate,  (BostonHousing$medv[i] - predict(lm_medv_candidate.LOOCV, BostonHousing[i,]))**2)
}
mean(err_lm_medv)
mean(err_lm_medv_inv_lstat)
mean(err_lm_medv_candidate)
ad.test(lm_medv_candidate$residuals
)
err_lm_medv
model <- train(medv ~ ., BostonHousing ,trControl = trainControl(method = 'LOOCV'), method = 'lm')
model
mat
fold_index_list <- createFolds(BostonHousing$medv, k = 10)
mat <- matrix(nrow = 0, ncol = 6)
colnames(mat) <- c('mse_train_lm_medv', 'mse_test_lm_medv', 'mse_train_lm_medv_inv_lstat', 'mse_test_lm_medv_inv_lstat',
'mse_train_lm_medv_candidate', 'mse_test_lm_medv_candidate')
for(fold in fold_index_list){
training_data <- BostonHousing[-fold, ]
test_data <- BostonHousing[fold, ]
lm_medv.10_fold_CV <- update(lm_medv, data = training_data)
lm_medv_inv_lstat.10_fold_CV <- update(lm_medv_inv_lstat, data = training_data)
lm_medv_candidate.10_fold_CV <- update(lm_medv_candidate, data = training_data)
mse_train_lm_medv <- mean((lm_medv.10_fold_CV$residuals)**2)
mse_train_lm_medv_inv_lstat <- mean((lm_medv_inv_lstat.10_fold_CV$residuals)**2)
mse_train_lm_medv_candidate <- mean((lm_medv_candidate.10_fold_CV$residuals)**2)
mse_test_lm_medv <- mean((test_data$medv - predict(lm_medv.10_fold_CV, test_data))**2)
mse_test_lm_medv_inv_lstat <- mean((test_data$medv - predict(lm_medv_inv_lstat.10_fold_CV, test_data))**2)
mse_test_lm_medv_candidate <- mean((test_data$medv - predict(lm_medv_candidate.10_fold_CV, test_data))**2)
mat <- rbind(mat, c(mse_train_lm_medv,
mse_test_lm_medv,
mse_train_lm_medv_inv_lstat,
mse_test_lm_medv_inv_lstat,
mse_train_lm_medv_candidate,
mse_test_lm_medv_candidate))
}
mat <- as.data.frame(mat)
colMeans(mat)
op = read.csv("../Desktop/opo.csv")
?read.csv()
op = read.csv("../Desktop/opo.csv", sep = "\t")
View(op)
op = read.csv("../Desktop/opo.csv", sep = "\t", header = F)
nrow(op)
count(op[op[3]>25],)
length(op[op[3]>25],)
length(op[op[3]>25,])
length(op[op[3]>25,]$V3)
op[op[12] == 'HERRAEZ ALBARRAN, BEATRIZ ILLES BALEARS',]$V3
op[op[2] == 'HERRAEZ ALBARRAN, BEATRIZ ILLES BALEARS',]$V3
bea = op[op[2] == 'HERRAEZ ALBARRAN, BEATRIZ ILLES BALEARS',]$V3
length(op[op[3]>bea,]$V3)
length(op[op[3]==bea,]$V3)
summary(op)
op = read.csv("../Desktop/opo.csv", sep = "\t", header = F)
nrow(op)
bea = op[op[2] == 'HERRAEZ ALBARRAN, BEATRIZ ILLES BALEARS',]$V3
length(op[op[3]==bea,]$V3)
summary(op)
length(op[op[3]>bea,]$V3)
op[op[3]==bea,]$V3
op[op[3]==bea,]
length(op[op[3]>=bea,]$V3)
nrow(op)
summary(op)
hist(op)
hist(op$V3)
hist(op$V3, breaks = 20)
hist(op$V3, breaks = 100)
hist(op$V3, breaks = 20)
boxplot(op$V3)
abline(h = bea)
abline(h = bea, color = 'red')
abline(h = bea, col = 'red')
?abline
hist(op$V3, breaks = 20)
abline(v = bea, col = 'red')
boxplot(op$V3)
abline(h = bea, col = 'red')
hist(op$V3, breaks = c(seq(25, 48, 2)))
hist(op$V3, breaks = c(seq(25, 48, 1)))
hist(op$V3, main = 'Cuerpo de Gestión de la Administración Civil del Estado. Ingreso Libre. Oferta de Empleo Público 2019',breaks = c(seq(25, 48, 1)))
hist(op$V3, main = 'Cuerpo de Gestión de la Administración Civil del Estado.\t Ingreso Libre. Oferta de Empleo Público 2019',breaks = c(seq(25, 48, 1)))
hist(op$V3, main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',breaks = c(seq(25, 48, 1)))
hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = c(seq(25, 48, 1)))
abline(v = bea, col = 'red')
boxplot(op$V3)
abline(h = bea,
col = 'red',
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',)
hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = c(seq(25, 48, 1)))
25:45
hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = 25:48))
hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = 25:48)
h <- hist(rnorm(1000), breaks=50, plot=FALSE)
cuts <- cut(h$breaks, c(-Inf,-.5,1.75,Inf))
plot(h, col=cuts)
bea
c(-Inf,-.5,1.75,Inf)
h <- hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = 25:48,
plot = F)
cuts <- cut(h$breaks, c(-Inf, 30, 315,Inf))
plot(h, col=cuts)
cuts <- cut(h$breaks, c(-Inf, 30, 31,Inf))
plot(h, col=cuts)
plot(h, col=c("white","green","red")[cuts])
plot(h, col=c("grey","red","grey")[cuts])
?abline
boxplot(op$V3)
abline(h = bea,
col = 'red',
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
lwd=3)
abline(h = bea,
col = 'red',
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
lwd=3, lty=2)
boxplot(op$V3)
abline(h = bea,
col = 'red',
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
lwd=3, lty=2)
abline(h = bea,
col = 'red',
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
lwd=3)
h <- hist(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
breaks = 25:48,
plot = F)
cuts <- cut(h$breaks, c(-Inf, 30, 31,Inf))
plot(h, col=c("grey","red","grey")[cuts])
plot(h, col=c("grey","red","grey")[cuts], main = "aa")
h <- hist(op$V3,
breaks = 25:48,
plot = F)
cuts <- cut(h$breaks, c(-Inf, 30, 31,Inf))
plot(h, col=c("grey","red","grey")[cuts],
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019')
boxplot(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',)
abline(h = bea,
col = 'red',
lwd=3)
boxplot(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019')
abline(h = bea,
col = 'red',
lwd=3)
plot(h, col=c("grey","red","grey")[cuts],
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
xlab = 'Nota')
plot(h, col=c("grey","red","grey")[cuts],
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
xlab = 'Nota',
ylab = 'Frecuencia')
h <- hist(op$V3,
breaks = 25:48,
plot = F)
cuts <- cut(h$breaks, c(-Inf, 30, 31,Inf))
plot(h, col=c("grey","red","grey")[cuts],
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019',
xlab = 'Nota',
ylab = 'Frecuencia')
boxplot(op$V3,
main = 'Cuerpo de Gestión de la Administración Civil del Estado.\n Ingreso Libre. Oferta de Empleo Público 2019')
install.packages("MicroDatosEs")
install.packages("rvest")
install.packages(c("httr", "jsonlite", "rjson", "tidyverse"))
library(rvest)
library(lubridate)
library(tidyverse)
library(httr)
setwd("ASIGNATURAS MASTER/Datos abiertos (Open Data)/MDS_2021_2022_Datos_abiertos_(Open_data)/code/")
library(rvest)
library(lubridate)
library(tidyverse)
library(httr)
process_timestamp <- function (dates) {
dates <- str_replace_all(
dates,
c('^([0-9]{1,2}/[0-9]{1,2})$' = paste(paste('\\1',
as.character(year(Sys.Date())),
sep = '/'), '23:59'),
'^([0-9]{1,2}:[0-9]{1,2})$' = paste(format(Sys.Date(), '%d/%m/%Y'), '\\1')
)
)
dates <- dmy_hm(dates)
dates <- replace_na(dates, Sys.time())
return(dates)
}
scrape_eurostoxx_data <- function(verbose) {
url_expansion <- 'http://www.expansion.com/mercados/cotizaciones/indices/eurostoxx_I.5E.html'
eurostoxx_table_columns <- c('stock', 'last', 'var_perc', 'var', 'ytd', 'max',
'min', 'volume', 'capitalization', 'timestamp')
expansion_request <- GET(url_expansion)
if (expansion_request$status_code != 200) {
eurostoxx_table <- data.frame(character(), numeric(), numeric(), numeric(),
numeric(), numeric(), numeric(), numeric(),
numeric(), POSIXct())
colnames(eurostoxx_table) <- eurostoxx_table_columns
return(eurostoxx_table)
}
expansion_web <- read_html(content(expansion_request, as = 'text'),
encoding = 'ISO-8859-15')
expansion_tables <- html_nodes(expansion_web, 'table#listado_valores')
eurostoxx_table <- html_table(expansion_tables[[1]], fill = TRUE, dec = ',')
if (verbose) {
print(head(eurostoxx_table))
}
eurostoxx_table <- eurostoxx_table[, 1:ncol(eurostoxx_table) - 1]
colnames(eurostoxx_table) <- eurostoxx_table_columns
eurostoxx_table <- eurostoxx_table %>%
as_tibble()
if (verbose) {
print(sapply(eurostoxx_table, class))
}
eurostoxx_table <- eurostoxx_table %>%
mutate(
across(
c(last, max, min, volume, capitalization),
~parse_number(.x, locale = locale(decimal_mark = ',', grouping_mark = '.'))
)
)
eurostoxx_table <- eurostoxx_table %>%
mutate(across(c(var_perc, ytd), function(x) x / 100))
eurostoxx_table <- eurostoxx_table %>%
mutate(timestamp = process_timestamp(timestamp))
if (verbose) {
print(sapply(eurostoxx_table, class))
}
return(eurostoxx_table)
}
eurostoxx_data <- scrape_eurostoxx_data(FALSE)
write_csv(eurostoxx_data, '.\\rvest_eurostoxx\\eurostoxx.csv' )
library(rvest)
library(lubridate)
library(tidyverse)
library(httr)
process_timestamp <- function (dates) {
dates <- str_replace_all(
dates,
c('^([0-9]{1,2}/[0-9]{1,2})$' = paste(paste('\\1',
as.character(year(Sys.Date())),
sep = '/'), '23:59'),
'^([0-9]{1,2}:[0-9]{1,2})$' = paste(format(Sys.Date(), '%d/%m/%Y'), '\\1')
)
)
dates <- dmy_hm(dates)
dates <- replace_na(dates, Sys.time())
return(dates)
}
scrape_eurostoxx_data <- function(verbose) {
url_expansion <- 'http://www.expansion.com/mercados/cotizaciones/indices/eurostoxx_I.5E.html'
eurostoxx_table_columns <- c('stock', 'last', 'var_perc', 'var', 'ytd', 'max',
'min', 'volume', 'capitalization', 'timestamp')
expansion_request <- GET(url_expansion)
if (expansion_request$status_code != 200) {
eurostoxx_table <- data.frame(character(), numeric(), numeric(), numeric(),
numeric(), numeric(), numeric(), numeric(),
numeric(), POSIXct())
colnames(eurostoxx_table) <- eurostoxx_table_columns
return(eurostoxx_table)
}
expansion_web <- read_html(content(expansion_request, as = 'text'),
encoding = 'ISO-8859-15')
expansion_tables <- html_nodes(expansion_web, 'table#listado_valores')
eurostoxx_table <- html_table(expansion_tables[[1]], fill = TRUE, dec = ',')
if (verbose) {
print(head(eurostoxx_table))
}
eurostoxx_table <- eurostoxx_table[, 1:ncol(eurostoxx_table) - 1]
colnames(eurostoxx_table) <- eurostoxx_table_columns
eurostoxx_table <- eurostoxx_table %>%
as_tibble()
if (verbose) {
print(sapply(eurostoxx_table, class))
}
eurostoxx_table <- eurostoxx_table %>%
mutate(
across(
c(last, max, min, volume, capitalization),
~parse_number(.x, locale = locale(decimal_mark = ',', grouping_mark = '.'))
)
)
eurostoxx_table <- eurostoxx_table %>%
mutate(across(c(var_perc, ytd), function(x) x / 100))
eurostoxx_table <- eurostoxx_table %>%
mutate(timestamp = process_timestamp(timestamp))
if (verbose) {
print(sapply(eurostoxx_table, class))
}
return(eurostoxx_table)
}
eurostoxx_data <- scrape_eurostoxx_data(T)
write_csv(eurostoxx_data, '.\\rvest_eurostoxx\\eurostoxx.csv' )
