install.packages('sampling')
?strata
library(sampling)
?strata
?help
str(iris)
head(iris)
library(dplyr)
iris %>% tbl_df()
iris %>% slice(1:3)
iris %>% filter(Species == "setosa")
iris %>% select(Species)
iris %>% select(one_of(c("Species", "Petal.Length")))
iris %>% select(Species, Petal.Length)
iris %>% summarise(Sepal.Length.Mean = mean(Sepal.Length))
iris %>% summarise(Petal.Width.IQR = IQR(Petal.Width))
iris %>% mutate(Sepal.Area = Sepal.Length * Sepal.Width, Petal.Area = Petal.Length * Petal.Width)
iris %>% transmute(Sepal.Area = Sepal.Length * Sepal.Width, Petal.Area = Petal.Length * Petal.Width)
iris %>% group_by(Species)
iris %>%
group_by(Species) %>%
summarise(Petal.Length.Mean = mean(Petal.Length))
iris %>%
group_by(Species) %>%
mutate(Petal.Length.Mean = mean(Petal.Length)) %>%
ungroup()
colnames(iris)
data(iris)
View(iris)
update.packages()
?update.packages
update.packages(ask=F)
packageVersion("ggplot2")
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species))
?stat_ellipse
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="norm")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t") + stat_ellipse(aes(col = Species), type="norm", linetype=2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t") + stat_ellipse(aes(col = Species), type="norm", linetype=2, geom="line")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t") + stat_ellipse(aes(col = Species), type="norm", linetype=2, geom="point")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t") + stat_ellipse(aes(col = Species), type="norm", linetype=2, geom="ellipse")
?stat_ellipse
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(col = Species)) + stat_ellipse(aes(col = Species), type="t") + stat_ellipse(aes(col = Species), type="norm", linetype=2, geom="path")
?ggsave
ggsave('prueba.png')
library(devtools)
install.packages('devtools')
library(devtools)
?pnorm
z <- (240-190) / 36
pnorm(z)
z <- (5 - 13) / 4.8
pnorm(z)
z <- (20 - 13) / 4.8
1 - pnorm(z)
z <- (10 - 13) / 4.8
pnorm(z)
z <- (16 - 13) / 4.8
pnorm(z)
0.7340145 - 0.2659855
qnorm(0.95)
qnorm(0.95) * 4.8 + 13
-2 / 0.14
qnorm(0.14)
-2 / 1norm(0.14)
-2 / qnorm(0.14)
pnorm((50-60)/40)
pnorm((80-60)/40)
pnorm((80-60)/40) - 0.5
qnorm(0.95)
qnorm(0.95) * 40 + 60
pnorm((100 - 60) / 40) * 120500
(1 - pnorm((100 - 60) / 40)) * 120500
pnorm((100 - 60) / 40)
pnorm((100 - 60) / 40) * 120500
120500 - 101382
1 - 0.84
0.16 * 120500
pnorm((100 - 60) / 40)
1 - pnorm((100 - 60) / 40)
0.1586553 * 120500
pnorm((108 - 100) / 16)
1 - pnorm((108 - 100) / 16)
pnorm((76 - 100) / 16)
pnorm((65 - 80) / 10)
pnorm((90 - 80) / 10)
pnorm((90 - 80) / 10) - 0.0668072
pnorm((95 - 80) / 10) - 0.5
qnorm(0.7)
qnorm(0.7) * 20 + 120
pnorm(1.64)
1 - pnorm(1.64)
pnorm(-2.33)
qnorm(0.6)
qnorm(0.66)
qnorm(0.33)
qnrom(0.64) * 10 + 90
qnorm(0.64) * 10 + 90
pnorm(1)
pnorm(1) - 1
pnorm(2.5)
1 - pnorm(2.5)
=25*9
25*9
?rpois
hist(rpois(365, 49))
hist(rpois(365*24, 49/24))
library(RMySQL)
install.packages()
install.packages('RMySQL')
library(RMySQL)
con <- dbConnect(MySQL(), user='surgedb', password='surg3db.', dbname='surgedb', host='localhost')
con <- dbConnect(MySQL(), user='surgedb', password='surg3db.', dbname='surgedb', host='127.0.0.1')
con <- dbConnect(MySQL(), user='surgedb', password='surg3db', dbname='surgedb', host='127.0.0.1')
rs <- dbSendQuery(con, 'select * from sys_user')
data <- fetch(rs)
data
data$username
rm(data)
rm(ls())
ls()
?rm
rm(list=ls())
exit
library(RMySQL)
conn <- dbConnect(MySQL(), user = 'root', password = 'root', host = '127.0.0.1', dbname = 'movielens')
sql <- 'SELECT g.description AS genre, COUNT(*) AS num_movies
FROM movie_genres AS mg, genres AS g
WHERE mg.genre_id = g.id
GROUP BY g.description
ORDER BY num_movies DESC'
res <- dbSendQuery(conn, sql)
results <- dbFetch(res)
results
plot(results)
barplot(results)
table(mtcars$gear)
results
as.matrix(results)
t(as.matrix(results))
barplot(t(as.matrix(results)))
barplot(t(as.matrix(results)), beside=T)
mydf <- data.frame( X1=c(A=2, B=4, C=1), X2=c(3,2,NA), X3=c(4,1,NA) )
mydf
t(as.matrix(mydf))
barplot(t(as.matrix(mydf)), beside=TRUE)
results
rownames(results) <- results$genre
results
results <- results[, 'num_movies']
results
names(results)
results <- dbFetch(res)
results
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
results
rownames(results) <- results$genre
t(as.matrix(results))
results <- results[, 'num_movies', drop=F]
results
results <- t(as.matrix(results))
results
barplot(results)
barplot(results, horiz = T)
barplot(results, horiz = T, main = 'Movies by genre')
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(1, 2, 1, 1))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(1, 1.1, 1, 1))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(1, 1.5, 1, 1))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(0, 1.5, 0, 0))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(1, 1.5, 0, 0))
barplot(results, horiz = T
par(mai = c(1, 1.5, 0, 0))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(0.8, 1.5, 1, 0))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(0.8, 1.5, 1, 1))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(0.8, 1.5, 1, 0.5))
barplot(results, horiz = T, main = 'Movies by genre', las = 1)
par(mai = c(0.8, 1.5, 1, 0.5))
barplot(results, main = 'Movies by genre', las = 1)
par(mai = c(0.8, 1.5, 1, 0.5))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1, 1, 1, 1))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 1, 1, 1))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 0, 1, 1))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 0.5, 1, 1))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 0.7, 1, 1))
par(mai = c(1.3, 0.7, 1, 1))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 0.7, 1, 0.5))
barplot(results, main = 'Movies by genre', las = 2)
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Movies by genre', las = 2)
dbClearResult(res)
sql <- 'SELECT YEAR(release_date) AS release_year, COUNT(*) as num_movies
FROM movies
GROUP BY YEAR(release_date)
ORDER BY YEAR(release_date)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
results
plot(results)
results <- results[results$release_year != 0, ]
plot(results)
lines(results)
plot(type = "n")
lines(results)
plot(results, type = "n")
lines(results)
par(mai = c(1.3, 0.7, 1, 0.3))
plot(results, type = "n", main = 'Movies per year')
lines(results)
par(mai = c(1, 0.7, 1, 0.3))
plot(results, type = "n", main = 'Movies per year')
lines(results)
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Movies per year')
lines(results)
dbDisconnect(conn)
# Load required packages
library(RMySQL)
# Create a connection to the movielens database
conn <- dbConnect(MySQL(), user = 'root', password = 'root', host = '127.0.0.1', dbname = 'movielens')
# Prepare a query to retrieve the number of movies rated per genre
sql <- 'SELECT g.description AS genre, COUNT(*) AS num_movies
FROM movie_genres AS mg, genres AS g
WHERE mg.genre_id = g.id
GROUP BY g.description
ORDER BY num_movies DESC'
# Execute the prepared query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Transform results to a named matrix
rownames(results) <- results$genre
results <- results[, 'num_movies', drop=F]
results <- t(as.matrix(results))
# Draw a plot of retrieved data
par(mai = c(1.3, 0.7, 1, 0.3))
barplot(results, main = 'Movies by genre', las = 2)
# Prepare a query to retrieve the number of movies per year
sql <- 'SELECT YEAR(release_date) AS release_year, COUNT(*) as num_movies
FROM movies
GROUP BY YEAR(release_date)
ORDER BY YEAR(release_date)'
# Execute the prepare query
res <- dbSendQuery(conn, sql)
# Fetch the results of the query
results <- dbFetch(res)
# Close/release the query results
dbClearResult(res)
# Prepare the results
results <- results[results$release_year != 0, ]
# Draw a plot of retrieved data
par(mai = c(1, 1, 1, 0.3))
plot(results, type = "n", main = 'Movies per year')
lines(results)
# Close the connection to the database
dbDisconnect(conn)
update.packages()
setwd("~/Documents/FormaciÃ³n/spark/homework/data")
beers <- read.table('beers.csv', sep = ',', dec = '.')
library(data.table)
beers <- read.table('beers.csv', sep = ',', dec = '.')
beers <- read.table('beers.csv', sep = ',', dec = '.')
beers <- read.table('beers.csv', sep = ',', dec = '.')
beers <- fread('beers.csv', sep = ',', dec = '.')
?fread
beers <- fread('beers.csv')
beers <- fread('beers.csv')
library(dplyr)
beers[is.na(beers)] <- 0
colnames(beers) <- c('row_id', 'abv', 'ibu','id','name','style','brewery_id', 'ounces')
beers %>%
filter(abv == 0)
beers %>%
summarise(total = mean(ounces))
beers %>%
group_by(style) %>%
summarise(total = max(abv))
beers %>%
group_by(style) %>%
summarise(total = max(abv)) %>%
arrange(desc(total))
breweriws <- fread('breweries.csv')
breweries <- fread('breweries.csv')
colnames(breweries) <- c('id', 'name', 'city', 'state')
beers %>%
filter(ibu != 0) %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
group_by(brewery_id) %>%
arrange(ibu)
beers %>%
filter(ibu != 0) %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
group_by(brewery_id) %>%
arrange(ibu) %>%
select(name.y)
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
filter(state == 'Chicago') %>%
arrange(desc(ibu))
unique(breweries$state)
unique(breweries$city)
sort(unique(breweries$city))
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
filter(city == 'Chicago') %>%
arrange(desc(ibu))
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
filter(city == 'Chicago') %>%
arrange(desc(ibu)) %>%
head()
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
group_by(state) %>%
summarise(total = n()) %>%
arrange(desc(total))
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
group_by(city, style) %>%
summarise(abv = sd(abv),
ibu = sd(ibu),
ounces = sd(ounces))
beers %>%
left_join(breweries, by = c('brewery_id' = 'id')) %>%
group_by(city, style) %>%
summarise(abv = sd(abv),
ibu = sd(ibu),
ounces = sd(ounces)) %>%
arrange(city, style)
?sd
beers %>%
arrange(desc(abv))
