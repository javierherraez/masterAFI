mutate(tipo_cliente = ifelse(tipo_cliente == abb_commercial, 'COMMERCIAL',
ifelse(tipo_cliente == abb_club, 'CLUB',
ifelse(tipo_cliente == abb_private, 'PRIVATE',
tipo_cliente))))
oil_budget<- oil_budget %>%
dplyr::rename('FECHA' = Fecha,
'EESS'  = EESS,
'UNIDAD NEGOCIO' = familia,
'VENTAS' = {{abb_sales_oil}},
'LITROS' = {{abb_quantity_oil}},
'MARGEN' = {{abb_margin_oil}},
'TICKTES' = {{abb_tickets_oil}},
'TICKET MEDIO ATV' = {{abb_ATVL_oil}},
'PRECIO MEDIO UNITARIO API' = {{abb_PML_oil}},
'TIPO CLIENTE' = tipo_cliente)
# RETAIL------------------------------------------------------------------------
sheets_selection_retail <- list(sheets_ticktes_retail,
sheets_sales_retail,
sheets_API_retail,
sheets_IpT_retail,
sheets_ATV_retail,
sheets_item_retail,
sheets_margin_retail
)
names(sheets_selection_retail) <- c(abb_tickets_retail,
abb_sales_retail,
abb_API_retail,
abb_IpT_retail,
abb_ATV_retail,
abb_item_retail,
abb_margin_retail)
archivos_retail <- list()
for (i in 1:length(sheets_selection_retail)){
first_item <- T
for (hoja in sheets_selection_retail[[i]]){
archivo <- readxl::read_xlsx(path = path_retail,
sheet = hoja,
range = rango_retail,
col_names = columnas_names)
archivo <- subset(archivo, select=-c(Día))
pivot_archivo <- archivo %>%
as.data.table() %>%
melt(id.vars = c('Fecha'))
names(pivot_archivo)[2:3] <- c('EESS', names(sheets_selection_retail[i]))
subdimension <- stringr::str_split(hoja,
paste0(names(sheets_selection_retail[i]),
separador_medida_tipo_retail),
n = 2)[[1]][2]
pivot_archivo$subdimension <- subdimension
if (first_item){
archivos_retail[[i]] <- pivot_archivo
first_item = F
}
else{
archivos_retail[[i]] <- rbind(archivos_retail[[i]], pivot_archivo)
}
}
}
retail_budget <- archivos_retail[[1]]
for (i in 2:length(archivos_retail)){
retail_budget <- retail_budget %>% full_join(archivos_retail[[i]])
}
retail_budget$familia <- 'RETAIL'
retail_budget <- retail_budget %>%
mutate(subdimension  = ifelse(subdimension  == abb_tiendapropia, 'TIENDAPROPIA',
ifelse(subdimension  == abb_franquicia, 'TIENDAFRANQUICIADA',
ifelse(subdimension  == abb_food_beverage, 'RESTAURACION',
subdimension))))
retail_budget[is.na(retail_budget)] <- 0
retail_budget[retail_budget$subdimension == abb_regulada]$familia <- 'REGULADA'
reg_to_none <- c(abb_tickets_retail, abb_API_retail, abb_IpT_retail, abb_ATV_retail, abb_margin_retail)
retail_budget[retail_budget$subdimension == abb_regulada][, reg_to_none] <- NA
retail_budget[retail_budget$subdimension == abb_regulada]$subdimension <- NA
retail_budget<- retail_budget %>%
dplyr::rename('FECHA' = Fecha,
'EESS'  = EESS,
'UNIDAD NEGOCIO' = familia,
'SUBDIMENSION U.N.' = subdimension,
'VENTAS' = {{abb_sales_retail}},
'MARGEN' = {{abb_margin_retail}},
'TICKTES' = {{abb_tickets_retail}},
'TICKET MEDIO ATV' = {{abb_ATV_retail}},
'PRECIO MEDIO UNITARIO API' = {{abb_API_retail}},
'ARTICULOS TOTALES Items' = {{abb_item_retail}},
'UNIDADES POR TICKET IpT' = {{abb_IpT_retail}})
# CARWASH ----------------------------------------------------------------------
sheets_selection_carwash <- sheets_carwash
carwash_budget <- list()
first_item <- T
for (hoja in sheets_selection_carwash){
archivo <- readxl::read_xlsx(path = path_carwash,
sheet = hoja,
range = rango_carwash,
col_names = columnas_names)
archivo <- subset(archivo, select=-c(Día))
pivot_archivo <- archivo %>%
as.data.table() %>%
melt(id.vars = c('Fecha'))
names(pivot_archivo)[2:3] <- c('EESS', 'VENTAS')
if (hoja == 'Total Sales'){
pivot_archivo$MARGEN <- pivot_archivo$VENTAS
pivot_archivo$`SUBDIMENSION U.N.` <- NA
}
if (hoja == 'Puro Brillo'){
pivot_archivo$MARGEN <- NA
pivot_archivo$`SUBDIMENSION U.N.` <- 'PUROBRILLO'
}
if (first_item){
carwash_budget <- pivot_archivo
first_item = F
}
else{
carwash_budget <- rbind(carwash_budget, pivot_archivo)
}
}
carwash_budget<- carwash_budget %>%
dplyr::rename('FECHA' = Fecha) %>%
mutate('UNIDAD NEGOCIO' = 'LAVADO'
)
# JOIN ALL
budget_total <- rbind(rbind(oil_budget, retail_budget, fill = T),
carwash_budget, fill = T)
col_order <- c('FECHA',
'EESS',
'UNIDAD NEGOCIO',
'SUBDIMENSION U.N.',
'VENTAS',
'LITROS',
'MARGEN',
'TICKTES',
'TICKET MEDIO ATV',
'PRECIO MEDIO UNITARIO API',
'ARTICULOS TOTALES Items',
'UNIDADES POR TICKET IpT',
'TIPO CLIENTE')
budget_total <- budget_total %>%
select(all_of(col_order))
budget_total$TICKTES <- round(budget_total$TICKTES)
budget_total$`ARTICULOS TOTALES Items` <- round(budget_total$`ARTICULOS TOTALES Items`)
budget_total$EESS <- mapvalues(budget_total$EESS,
from = c('AG1', 'AG2', 'ASR', 'CPH', 'CB1', 'CB2', 'EVC',
'LEB', 'LEP', 'PAR', 'RV1', 'RV2', 'SS1', 'SS2',
'SLV', 'VMD', 'VMI', 'VPB', 'VTR', 'VLL', 'US'),
to = c(1101, 1111, 1011, 1151, 1041, 1051, 1211,
1191, 1141, 1091, 1061, 1071, 1021, 1031,
1081, 1171, 1181, 1161, 1231, 1201, 1022))
budget_total$EESS <- as.integer(levels(budget_total$EESS))[budget_total$EESS]
budget_total %>% writexl::write_xlsx(documento_salida)
rm(list=ls())
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('../data/arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('../data/arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('ASIGNATURAS MASTER/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation/')
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/06. Visualización de información/02. Visualización_dinámica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('../data/nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('../data/arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
team_filte <- "TODOS"
stats_date <- nba_df
if(team_filtre != "TODOS"){
stats_date <- stats_date %>%
filter(team_name == team_filtre)
}
stats_date <- stats_date %>%
group_by(week = cut(date, "week")) %>%
summarise(points = sum(points, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
assists = sum(assists, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
blocks = sum(blocks, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
rebounds = sum(rebounds, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
steals = sum(steals, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
turnovers = sum(turnovers, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
n_games = n_distinct(game_id))
stats_date$week <- as.Date(stats_date$week)
ts_stats_date <- xts(stats_date[-1], order.by = stats_date$week)
team_filtre <- "TODOS"
stats_date <- nba_df
if(team_filtre != "TODOS"){
stats_date <- stats_date %>%
filter(team_name == team_filtre)
}
stats_date <- stats_date %>%
group_by(week = cut(date, "week")) %>%
summarise(points = sum(points, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
assists = sum(assists, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
blocks = sum(blocks, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
rebounds = sum(rebounds, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
steals = sum(steals, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
turnovers = sum(turnovers, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
n_games = n_distinct(game_id))
stats_date$week <- as.Date(stats_date$week)
stats_date <- nba_df
if(team_filtre != "TODOS"){
stats_date <- stats_date %>%
filter(team_name == team_filtre)
}
stats_date <- stats_date %>%
group_by(week = cut(date, "week")) %>%
summarise(points = sum(points, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
assists = sum(assists, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
blocks = sum(blocks, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
rebounds = sum(rebounds, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
steals = sum(steals, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
turnovers = sum(turnovers, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
n_games = n_distinct(game_id))
stats_date
