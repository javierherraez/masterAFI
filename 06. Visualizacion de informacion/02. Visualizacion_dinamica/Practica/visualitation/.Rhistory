install.packages("xml2")
# setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
setwd('C:/Users/Javier/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
# setwd('C:/Users/Javier/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
pair_conference_division <- unique(as.data.frame(t(sapply(geojson$features, function(feat){
return (c(feat$properties$conference, feat$properties$division))
}))))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
conf_div <- expand.grid(input$conference_map, input$division_map)
if(!any(do.call(paste0, conf_div) %in% do.call(paste0, pair_conference_division))){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
?dashboardPage
View(nba_df)
stat <- "points"
nba_df %>% group_by(team_name) %>%
summarise({{stat}} := sum(stat)/n_distinct(game_id))
stat <- "points"
nba_df %>% group_by(team_name) %>%
summarise({{stat}} := sum({{stat}})/n_distinct(game_id))
meanofcol <- function(df, col) {
mutate(df, "Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, Petal.Width)
stat <- "points"
nba_df %>% group_by(team_name) %>%
mutate({{stat}} := sum({{stat}})/n_distinct(game_id))
nba_df %>% group_by(team_name
)
stat <- "points"
nba_df %>% group_by(team_name) %>%
mutate({{stat}} := mean({{stat}})/n_distinct(game_id))
nba_df %>% group_by(team_name) %>%
mutate({{stat}} := mean({{stat}}, na.rm = T)/n_distinct(game_id))
nba_df %>% group_by(team_name) %>%
mutate({{stat}} := mean({{stat}}, na.rm = T))
stat <- "points"
nba_df %>% group_by(team_name) %>%
mutate("avg {{stat}}" := mean({{stat}}, na.rm = T))
nba_df %>%
select(team_name, {{stat}})
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
mutate("avg {{stat}}" := mean({{stat}}, na.rm = T))
stat <- "points"
nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
mutate("avg {{stat}}" := mean({{stat}}, na.rm = T))
warnings()
meanofcol <- function(df, col) {
mutate(df, "Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, Petal.Width)
meanofcol <- function(df, col) {
df %>% group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, Petal.Width)
meanofcol <- function(df, col) {
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, Petal.Width)
nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
mutate("avg {{stat}}" := mean({{stat}}))
meanofcol(nba_df, points)
meanofcol <- function(df, col) {
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, eval(parse(text = "Petal.Width")))
eval(parse(text = "Petal.Width"))
meanofcol(iris, eval(parse(text = "Petal.Width")))
parse(text = "Petal.Width")
substitute("Petal.With")
meanofcol(iris, as.name("Petal.Width"))
as.name("Petal.Width")
x <- as.name("Petal.Width")
meanofcol(iris, x)
x
class(x)
assign("Petal.Width", as.name("Petal.Width"))
Petal.Width
meanofcol(iris, Petal.Width)
assign("stat", as.name("Petal.Width"))
meanofcol(iris,  stat)
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean((!!col)))
meanofcol(iris,  "Pet
)
")"
)
")
meanofcol(iris,  "Petal.Width")
meanofcol <- function(df, col) {
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean((!!col)))
}
meanofcol(iris,  "Petal.Width")
meanofcol(iris, matches("Petal.Width"))
matches("Petal.Width")
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean((!!col)))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
matches("Petal.Width")
iris
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
#group_by(Species) %>%
#mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
#group_by(Species) %>%
#mutate("Mean of {{col}}" := mean(col))
}
meanofcol <- function(df, col) {
df %>%
select(Species, col) #%>%
#group_by(Species) %>%
#mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) #%>%
#mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) #%>%
mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) %>%
mutate("Mean of " := mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, col) %>%
group_by(Species) %>%
mutate("Mean of " = mean(col))
}
meanofcol(iris, matches("Petal.Width"))
meanofcol <- function(df, col) {
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
}
meanofcol(iris, sym("Petal.Width"))
my_var <- "Sepal.Length"
my_sym <- sym(my_var)
summarize(iris, Mean = mean({{ my_sym }}))
meanofcol <- function(df, col) {
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
}
my_var <- "Sepal.Length"
my_sym <- sym(my_var)
meanofcol(iris, my_sym)
my_var <- "Sepal.Length"
col <- sym(my_var)
df %>%
select(Species, {{col}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
my_var <- "Sepal.Length"
col <- sym(my_var)
df %>%
select(Species, (!!col))
?sym
my_var <- "Sepal.Length"
col <- sym(my_var)
df %>%
select(Species, {{my_var)) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
my_var <- "Sepal.Length"
col <- sym(my_var)
iris %>%
select(Species, {{my_var)) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
my_var <- "Sepal.Length"
col <- sym(my_var)
iris %>%
select(Species, {{my_var)) %>%
group_by(Species)
iris
my_var <- "Sepal.Length"
col <- sym(my_var)
iris %>%
select(Species, {{my_var}}) %>%
group_by(Species) %>%
mutate("Mean of {{col}}" := mean({{col}}))
my_var <- "Sepal.Length"
col <- sym(my_var)
iris %>%
select(Species, {{my_var}}) %>%
group_by(Species) %>%
summarise("Mean of {{col}}" := mean({{col}}))
?sym
stat <- "points"
stat_sym <- rlang::sym(stat)
nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
mutate("avg {{stat}}" := mean({{stat_sym}}))
stat <- "points"
stat_sym <- rlang::sym(stat)
nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
summarise("avg {{stat}}" := mean({{stat_sym}}))
stat <- "points"
stat_sym <- rlang::sym(stat)
stat_df <- nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
summarise("avg {{stat}}" := mean({{stat_sym}}))
ggplot(stat_df) %>%
geom_bar()
(ggplot(stat_df, aes(stat)) %>%
geom_bar())
geom_bar
?geom_bar
stat_df
ggplot(stat_df, aes(team_name, stat)) %>%
geom_bar())
ggplot(stat_df, aes(team_name, stat)) %>%
geom_bar()
ggplot(stat_df, aes(team_name, stat))
ggplot(stat_df, aes(team_name, stat_sym)) %>%
geom_bar()
stat <- "points"
stat_sym <- rlang::sym(stat)
stat_df <- nba_df %>%
select(team_name, {{stat}}) %>%
group_by(team_name) %>%
summarise("stat" := mean({{stat_sym}}))
ggplot(stat_df, aes(team_name, stat)) %>%
geom_bar()
stat_df
entry_stat <- "points"
stat_sym <- rlang::sym(entry_stat)
stat_df <- nba_df %>%
select(team_name, {{entry_stat}}) %>%
group_by(team_name) %>%
summarise("stat" := mean({{stat_sym}}))
ggplot(stat_df, aes(team_name, stat)) %>%
geom_bar()
ggplot(stat_df, aes(x = team_name, stat)) %>%
geom_histogram()
ggplot(stat_df, aes(x = team_name, stat)) +
geom_histogram()
ggplot(stat_df, aes(x = team_name, stat)) +
geom_bar()
ggplot(stat_df, aes(x = team_name, y = stat)) +
geom_bar()
ggplot(stat_df, aes(x = team_name, y = stat)) +
geom_col()
ggplot(stat_df, aes(team_name, stat)) +
geom_col()
ggplot(stat_df, aes(reorder(team_name, -stat), stat)) +
geom_col()
entry_stat <- "points"
entry_var <- "team_name"
stat_sym <- rlang::sym(entry_stat)
stat_df <- nba_df %>%
select({{entry_var}}, {{entry_stat}}) %>%
group_by({{entry_var}}) %>%
summarise("stat" := mean({{stat_sym}}))
stat_df
nba_df %>%
select({{entry_var}}, {{entry_stat}})
entry_stat <- "points"
entry_var <- "team_name"
var_sym <- rlang::sym(entry_var)
stat_sym <- rlang::sym(entry_stat)
nba_df %>%
select({{entry_var}}, {{entry_stat}}) %>%
group_by({{var_sym}}) %>%
summarise("stat" := mean({{stat_sym}}))
View(nba_df)
grepl(paste(positions, collapse = "|"), "P")
grepl(paste("P", collapse = "|"), "P-G")
paste("P", collapse = "|")
paste(c("P", "C", "G"), collapse = "|")
grpl(paste(c("P", "C", "G"), collapse = "|"), "P-G")
grepl(paste(c("P", "C", "G"), collapse = "|"), "P-G")
?split
strsplit("P-G", "-")
strsplit("P-G", "-")[1]
strsplit("P-G", "-")[[1]]
mutate(player_position = strsplit(player_position, "-"))
nba_df %>%  mutate(player_position = strsplit(player_position, "-"))
nba_df %>%
mutate(player_position = strsplit(player_position, "-")) %>%
group_by(player_position) %>% summarise("stat", points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[1]) %>%
group_by(player_position) %>% summarise("stat", points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[[1]]) %>%
group_by(player_position) %>% summarise("stat", points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[[1]]) %>%
group_by(player_position)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[[1]]) %>%
group_by(player_position) %>% summarise("stat" = points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[1]) %>%
group_by(player_position) %>% summarise("stat" = points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[[1]]) %>%
group_by(player_position) %>% summarise("stat" = points)
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[[1]]) %>%
group_by(player_position) %>% summarise("stat" = mean(points))
nba_df %>%
mutate(player_position = strsplit(player_position, "-")[1]) %>%
group_by(player_position) %>% summarise("stat" = mean(points))
nba_df %>%
mutate(player_position = strsplit(player_position, "-")) %>%
group_by(player_position) %>% summarise("stat" = mean(points))
unlist(strsplit("P-G", "-"))
unlist(strsplit("P-G", "-"))[1]
nba_df %>%
mutate(player_position = unlist(strsplit(player_position, "-")))[1] %>%
group_by(player_position) %>% summarise("stat" = mean(points))
nba_df %>%
mutate(player_position = unlist(strsplit(player_position, "-")))
nba_df %>%
mutate(player_position = unlist(strsplit(player_position, "-"))) %>%
group_by(player_position) %>% summarise("stat" = mean(points))
unlist(strsplit("P", "-"))[1]
unlist(strsplit("", "-"))[1]
nba_df %>%
filter(player_position != "") %>%
mutate(player_position = unlist(strsplit(player_position, "-")))
nba_df %>%
filter(player_position != "")
nba_df %>%
filter(player_position != "") %>%
mutate(player_position = unlist(strsplit(player_position, "-"))[1])
nba_df %>%
filter(player_position != "") %>%
mutate(player_position = unlist(strsplit(player_position, "-")))
nba_df %>%
filter(player_position != "") %>%
mutate(player_position = function(x) unlist(strsplit(as.character(x), '-')))
nba_df %>%
filter(player_position != "") %>%
mutate(player_position = function(player_position) unlist(strsplit(player_position, '-')))
nba_df %>%
do(Split.position(-))
nba_df %>%
do(Split.position("-"))
