datosBanca$salary_CAT<-as.numeric(datosBanca$salary)
summary(datosBanca)
# Cambiar missings por 0 #
datosBanca$checkingAccount_CAT[is.na(datosBanca$checkingAccount_CAT)]<-0
datosBanca$deposit_CAT[is.na(datosBanca$deposit_CAT)]<-0
datosBanca$shareOfStock_CAT[is.na(datosBanca$shareOfStock_CAT)]<-0
datosBanca$pensionPlan_CAT[is.na(datosBanca$pensionPlan_CAT)]<-0
datosBanca$mortgage_CAT[is.na(datosBanca$mortgage_CAT)]<-0
datosBanca$loan_CAT[is.na(datosBanca$loan_CAT)]<-0
datosBanca$cards_CAT[is.na(datosBanca$cards_CAT)]<-0
datosBanca$insurance_CAT[is.na(datosBanca$insurance_CAT)]<-0
datosBanca$billPayment_CAT[is.na(datosBanca$billPayment_CAT)]<-0
# install.packages("sqldf")
library(sqldf)
centroideTotalCartera <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from datosBanca")
clientesNominados <- subset(datosBanca,datosBanca$salary==1)
centroideNominados <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesNominados")
clientesHipotecados <- subset(datosBanca,datosBanca$mortgage_CAT>0)
centroideHipotecados <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesHipotecados")
clientesInversores <- subset(datosBanca,datosBanca$shareOfStock_CAT>0)
centroideInversores <-  sqldf("Select
avg(checkingAccount_CAT) as checkingAccount_CAT,
avg(deposit_CAT) as deposit_CAT,
avg(shareOfStock_CAT) as shareOfStock_CAT,
avg(pensionPlan_CAT) as pensionPlan_CAT,
avg(mortgage_CAT) as mortgage_CAT,
avg(loan_CAT) as loan_CAT,
avg(cards_CAT) as cards_CAT,
avg(insurance_CAT) as insurance_CAT,
avg(billPayment_CAT) as billPayment_CAT,
avg(salary_CAT) as salary_CAT
from clientesInversores")
centroides<-rbind(centroideTotalCartera,centroideNominados,centroideHipotecados,centroideInversores)
# Adjuntamos los límites del gráfico de radar (0 y 1)
# Esto es necesario para utilizar la función gráfica de rádar
# También adjuntamos el comportamiento medio de la cartera
# para poder comparar cada centroide con la media total
# install.packages("fmsb")
library(fmsb)
centroidesParaRadar<-rbind(
rep(1,10) ,
rep(0,10) ,
centroides)
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )
for (i in 4:nrow(centroidesParaRadar)-3)
{
radarchart( as.data.frame(centroidesParaRadar[c(1:3,3+i),])  , axistype=1 ,
#custom polygon
pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
}
View(datosBanca)
datosBanca$mortgage_CAT<-discrete_by_quantile(datosBanca$mortgage)/4
cor(datosBanca[, 12:21], method = "spearman") # mejor que la correlación normal
View(centroides)
View(centroidesParaRadar)
setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
#setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/60. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
#setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/60. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
#setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/60. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
#setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
#setwd('C:/Users/Javier/Documents/masterAFI/60. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
