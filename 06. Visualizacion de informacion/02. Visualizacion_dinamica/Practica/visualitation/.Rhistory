selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
conf_div <- expand.grid(input$conference_map, input$division_map)
if(!any(do.call(paste0, conf_div) %in% do.call(paste0, pair_conference_division))){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
# setwd('C:/Users/Javier/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
pair_conference_division <- unique(as.data.frame(t(sapply(geojson$features, function(feat){
return (c(feat$properties$conference, feat$properties$division))
}))))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
conf_div <- expand.grid(input$conference_map, input$division_map)
if(!any(do.call(paste0, conf_div) %in% do.call(paste0, pair_conference_division))){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
# setwd('C:/Users/Javier/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
pair_conference_division <- unique(as.data.frame(t(sapply(geojson$features, function(feat){
return (c(feat$properties$conference, feat$properties$division))
}))))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
conf_div <- expand.grid(input$conference_map, input$division_map)
if(!any(do.call(paste0, conf_div) %in% do.call(paste0, pair_conference_division))){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(xts)
draw_dygraph <- function(df, team_filtre) {
stats_date <- df
if (team_filtre != "TODOS") {
stats_date <- stats_date %>%
filter(team_name == team_filtre)
}
stats_date <- stats_date %>%
group_by(week = cut(date, "week")) %>%
summarise(
points = sum(points, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
assists = sum(assists, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
blocks = sum(blocks, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
rebounds = sum(rebounds, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
steals = sum(steals, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
turnovers = sum(turnovers, na.rm = T) / n_distinct(game_id) / ifelse(team_filtre != "TODOS", 1, 2),
n_games = n_distinct(game_id)
)
stats_date$week <- as.Date(stats_date$week)
ts_stats_date <- xts(stats_date[-1], order.by = stats_date$week)
return (
dygraph(
ts_stats_date,
width = 500,
height = 500,
main = "Weekly Average"
) %>%
dyShading(from = "1912-1-1", to = "2022-1-1", color = "#222D32") %>%
dyRangeSelector(dateWindow = c(
min(stats_date$week), max(stats_date$week)
)) %>%
dySeries(
"points",
color = "#e41a1c",
label = "Puntos",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"assists",
color = "#377eb8",
label = "Asistencias",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"blocks",
color = "#4daf4a",
label = "Bloqueos",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"rebounds",
color = "#984ea3",
label = "Rebotes",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"steals",
color = "#ff7f00",
label = "Robos",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"turnovers",
color = "#ffd92f",
label = "Perdidas",
strokeWidth = 3,
drawPoints = T,
pointSize = 3
) %>%
dySeries(
"n_games",
strokePattern = "dotted",
color = "#a65628",
label = "N Partidos",
strokeWidth = 3
) %>%
dyLegend(labelsDiv = "legenddygraph")
)
}
draw_map <- function(df,json,positions,conferences,divisions) {
salary_df <- df %>%
filter(grepl(paste(positions, collapse = "|"), player_position)) %>%
group_by(team_name) %>%
summarise(salary = sum(salary, na.rm = T) / n_distinct(id))
pal <- colorNumeric(rev(heat.colors(10)), salary_df$salary)
geojson_draw_map <- c()
geojson_draw_map$type <- json$type
geojson_draw_map$features <- c()
i = 1
for (feat in json$features) {
if ((feat$properties$conference %in% conferences) &
(feat$properties$division %in% divisions)) {
geojson_draw_map$features[[i]] <- feat
geojson_draw_map$features[[i]]$properties$style <-
list(fillColor = pal(salary_df$salary[salary_df$team_name == feat$properties$team]))
geojson_draw_map$features[[i]]$properties$popup <-
paste('<b>Equipo:</b>',feat$properties$cit,feat$properties$team,
'<br><b>Estadio:</b>', feat$properties$arena,
'<br><b>Salario medio:</b>', format(
round(salary_df$salary[salary_df$team_name == feat$properties$team], digits = 0),
big.mark = ".",
decimal.mark = ","),"$")
i = i + 1
}
}
df_map <- as.data.frame(t(sapply(geojson_draw_map$features, function(feat) {
return(
c(long = feat$geometr$coordinates[[1]],
lat = feat$geometr$coordinates[[2]],
color = feat$properties$style$fillColor)
)
})))
df_map$lat <- as.numeric(df_map$lat)
df_map$long <- as.numeric(df_map$long)
return (
leaflet(df_map) %>%
setView(lng = -102, lat = 38, zoom = 4) %>%
addTiles(urlTemplate = 'https://cartocdn_{s}.global.ssl.fastly.net/base-midnight/{z}/{x}/{y}.png') %>%
addGeoJSON(geojson_draw_map) %>%
addCircleMarkers(
lng = ~ long,
lat = ~ lat,
color = ~ color,
opacity = 1,
fillOpacity  = 0.5
) %>%
leaflet::addLegend("bottomright", pal = pal, values = salary_df$salary, title = "Salario", opacity = 1)
)
}
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(leaflet)
library(jsonlite)
library(dygraphs)
# setwd('C:/Users/jherraez/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
# setwd('C:/Users/Javier/Documents/masterAFI/06. Visualizacion de informacion/02. Visualizacion_dinamica/Practica/visualitation')
source('functions.R')
nba_df = read.csv('nba2020.csv')
nba_df$date <- as.Date(nba_df$date)
geojson <- readLines('arenas.geojson', warn = FALSE, encoding = 'utf-8') %>%
paste(collapse = '\n') %>%
fromJSON(simplifyVector = FALSE)
conferences_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$conference)
}))
divisions_nba <- unique(sapply(geojson$features, function(feat){
return (feat$properties$division)
}))
pair_conference_division <- unique(as.data.frame(t(sapply(geojson$features, function(feat){
return (c(feat$properties$conference, feat$properties$division))
}))))
# Interface
ui <- dashboardPage(
skin = 'blue',
dashboardHeader(
title = 'NBA 2020 - 2021',
titleWidth = 300
),
dashboardSidebar(
sidebarMenu(
menuItem('Estadísticas Promedio Semanales', tabName = 'Temporal'),
menuItem('Salario por equipos', tabName = 'Map')
),
width = 300),
dashboardBody(
includeCSS('custom.css'),
tabItems(
tabItem(tabName = 'Temporal',
fluidRow(
column(12, h2('Estadísticas promedio semanales', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(selectInput(inputId = 'team_weekly',
label = 'Equipo',
choices = c('TODOS', unique(nba_df$team_name)),
multiple = FALSE))
),
column(width = 9,
box(dygraphOutput('dygraph'), width=12),
box(textOutput('legenddygraph'), width=12)
)
)
),
tabItem(tabName = 'Map',
fluidRow(
column(12, h2('Salarios por equipos', style='color:#3C8DBC'))
),
fluidRow(
column(width = 3,
wellPanel(checkboxGroupInput(inputId = 'position_map',
label = 'Posición',
choices = c('Center' = 'C',
'Foward' = 'F',
'Guard' = 'G'),
selected = 'C, F, G')),
wellPanel(checkboxGroupInput(inputId = 'conference_map',
label = 'Conferencia',
choices = conferences_nba,
selected = conferences_nba)),
wellPanel(checkboxGroupInput(inputId = 'division_map',
label = 'Division',
choices = divisions_nba,
selected = divisions_nba))
),
column(width = 9,
leafletOutput(outputId = 'mapa', height = 500))
)
)
)
)
)
# Server
server <- function(input, output, session){
output$dygraph <- renderDygraph({
draw_dygraph(nba_df, input$team_weekly)
})
output$mapa <- renderLeaflet({
draw_map(nba_df, geojson, input$position_map, input$conference_map, input$division_map)
})
observe({
if(length(input$position_map) < 1){
updateCheckboxGroupInput(session, 'position_map', selected = 'C')
}
if(length(input$conference_map) < 1){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
if(length(input$division_map) < 1){
updateCheckboxGroupInput(session, 'division_map', selected = divisions_nba)
}
conf_div <- expand.grid(input$conference_map, input$division_map)
if(!any(do.call(paste0, conf_div) %in% do.call(paste0, pair_conference_division))){
updateCheckboxGroupInput(session, 'conference_map', selected = conferences_nba)
}
})
}
# Deployment
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::setAccountInfo(name = 'javierherraezalbarran',
token = '5BF992906B9E6CE437488AAF3E203CC1',
secret = 'mBmGb7/KIB818NLbQjECB3RA0qVLNhvfQGgPjODf')
deployApp()
