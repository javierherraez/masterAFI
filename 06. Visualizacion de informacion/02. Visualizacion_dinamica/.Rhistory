yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
diamonds %>% count(cut, clarity) %>%
plot_ly(x = ~cut, y = ~n,type = 'bar', color = ~clarity)
#Otra opción, con histograma, que por defecto usa la función "count"
diamonds %>%
plot_ly(x = ~cut, type = 'histogram', color = ~clarity)
diamonds %>%
plot_ly(x = ~cut, y = ~price, type = 'box')
library(dplyr)
library(ggplot2)
library(highcharter)
data("diamonds")
set.seed(42)
index <- sample.int(nrow(diamonds), 1000)
hchart(diamonds, "scatter", hcaes(x = "carat",
y = "price"))
hchart(diamonds[index,], "scatter", hcaes(x = "carat",
y = "price", group = "cut"))
hchart(diamonds[index,], "scatter", hcaes(x = "carat",
y = "price", group = "cut"))
hchart(diamonds[index,], "scatter", hcaes(x = "carat",
y = "price", group = "cut",
size = "depth"))
hchart(diamonds[index,], "scatter", hcaes(x = "carat",
y = "price", group = "cut",
size = "depth / 10"))
hchart(diamonds[index,], "scatter", hcaes(x = "carat",
y = "price", group = "cut",
size = "depth / 1000"))
diamonds %>% count(cut) %>%
arrange(n) %>%
hchart(type = "bar", hcaes(x = "cut", y = "n"))
by_clarity <- diamonds %>%
group_by(cut, clarity) %>%
summarise(n = n()) %>%
arrange(cut,n)
diamonds %>%
count(cut,clarity) %>%
hchart(type = "column", hcaes(x = "cut", y = "n", group = "clarity"))
by_clarity <- diamonds %>%
group_by(cut, clarity) %>%
summarise(n = n()) %>%
arrange(cut,n)
by_clarity
hchart(diamonds$price)
hchart(density(diamonds$price),
color = "lightsalmon", name = "Price Density")
hchart(density(diamonds$price),
color = "lightsalmon", name = "Price Density")
numeric <- sapply(diamonds, is.numeric)
hchart(cor(diamonds[numeric]))
library(dygraphs)
data(nhtemp)
nhtemp
dygraph(nhtemp, main = "Temperatura en New Haven")
dygraph(nhtemp, main = "Temperatura en New Haven")%>%
dyRangeSelector(dateWindow = c("1930-01-01", "1960-01-01"))
data(AirPassengers)
AirPassengers
dygraph(AirPassengers, main = "Num. Pasajeros")
dygraph(ldeaths)
dygraph(cbind(fdeaths,mdeaths)) %>% dyRangeSelector()
cbind(fdeaths,mdeaths
)
fdeaths
mdeaths
?mdeaths
dygraph(cbind(fdeaths,mdeaths))%>%
dySeries("mdeaths", label = "Hombres") %>%
dySeries("fdeaths", label = "Mujeres") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 80)
dygraph(c(fdeaths,mdeaths)) %>% dyRangeSelector()
dygraph(cbind(fdeaths,mdeaths)) %>% dyRangeSelector()
dygraph(cbind(fdeaths,mdeaths))%>%
dySeries("mdeaths", label = "Hombres") %>%
dySeries("fdeaths", label = "Mujeres") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 80)
dygraph(cbind(fdeaths,mdeaths))%>%
dySeries("mdeaths", label = "Hombres") %>%
dySeries("fdeaths", label = "Mujeres") %>%
dyOptions(stackedGraph = F) %>%
dyRangeSelector(height = 80)
dygraph(cbind(fdeaths,mdeaths))%>%
dySeries("mdeaths", label = "Hombres") %>%
dySeries("fdeaths", label = "Mujeres") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 80)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
# Output functions
plotOutput(
outputId = 'normal_hist'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
stopApp()
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
# Output functions
plotOutput(
outputId = 'normal_hist'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
output$normal_hist <- renderPlot(
hist(rnorm(n = 1000, mean = input$normal_mean, sd = input$normal_sd))
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(rsconnect)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
# Output functions
plotOutput(
outputId = 'normal_hist'
),
verbatimTextOutput(
outputId = 'normal_summary'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
output$normal_hist <- renderPlot(
hist(rnorm(n = 5, mean = input$normal_mean, sd = input$normal_sd))
)
output$normal_summary <- renderPrint(
summary(rnorm(n = 5, mean = input$normal_mean, sd = input$normal_sd))
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
# Output functions
plotOutput(
outputId = 'normal_hist'
),
verbatimTextOutput(
outputId = 'normal_summary'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
output$normal_hist <- renderPlot(
hist(rnorm(n = 5, mean = input$normal_mean, sd = input$normal_sd))
)
output$normal_summary <- renderPrint(
summary(rnorm(n = 5, mean = input$normal_mean, sd = input$normal_sd))
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
# Output functions
plotOutput(
outputId = 'normal_hist'
),
verbatimTextOutput(
outputId = 'normal_summary'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
x <- reactive(rnorm(n = 5, mean = input$normal_mean, sd = input$normal_sd))
# Now x is a function!
output$normal_hist <- renderPlot(
hist(x())
)
output$normal_summary <- renderPrint(
summary(x())
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
textInput(
inputId = 'histogram_title',
label = 'Choose a title for the histogram',
value = 'Histogram of a random normal variable'
),
# Output functions
plotOutput(
outputId = 'normal_hist'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
output$normal_hist <- renderPlot(
hist(rnorm(n = 1000, mean = input$normal_mean, sd = input$normal_sd),
main = isolate(input$histogram_title))
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
# Input functions
sliderInput(
inputId = 'normal_mean',
label = 'Choose the mean of a normal distribution',
min = -10, max = 10, value = 0
),
sliderInput(
inputId = 'normal_sd',
label = 'Choose the standard deviation of a normal distribution',
value = 1, min = 0.01, max = 10
),
textInput(
inputId = 'histogram_title',
label = 'Choose a title for the histogram',
value = 'Histogram of a random normal variable'
),
# Output functions
plotOutput(
outputId = 'normal_hist'
)
)
# Function used to assemple inputs into outputs
server <- function(input, output){
output$normal_hist <- renderPlot(
hist(rnorm(n = 1000, mean = input$normal_mean, sd = input$normal_sd),
main = isolate(input$histogram_title))
)
}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
install.packages("languageserver")
library(shiny)
# Function use to create the user interface and display elements
ui <- fluidPage(
HTML('<p>This is a paragraph</p>
<p>This is another paragraph. There will be an iframe below</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Gyrfsrd4zK0" frameborder="0" allowfullscreen></iframe>')
)
# Function used to assemple inputs into outputs
server <- function(input, output){}
# Function that builds the app with an interface and a server given
shinyApp(ui = ui, server = server)
install.packages("shinythemes")
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40)
setwd("ASIGNATURAS MASTER/Visualización de información/MDS_Visualización_dinámica/Shiny_Leaflet/")
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40)
setwd("../")
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1) %>%
setView(lng = -3.68, lat = 40.43, zoom = 10)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1) %>%
setView(lng = -3.68, lat = 40.43, zoom = 20)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1) %>%
setView(lng = -3.68, lat = 40.43, zoom = 12)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1) %>%
setView(lng = -3.68, lat = 40.43, zoom = 14)
library(leaflet)
multas <- read.csv("Shiny_Leaflet/datos_ejercicios/multas.csv", sep = ";", encoding="UTF-8")
head(multas)
pal <- colorFactor(
palette = "Paired",
domain = multas$CAT
)
popup <- paste0('<b>Mes:</b> ', as.character(multas$MES), '<br>',
'<b>Lugar:</b>', as.character(multas$LUGAR))
leaflet(data = multas) %>%
addTiles(urlTemplate = 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~lon, ~lat,
popup = ~ popup,
color = ~ pal(CAT),
fill = T,
fillOpacity = 0.5,
weight = 0,
radius = 40) %>%
addLegend("bottomright", pal = pal, values = ~CAT,
title = "Tipo de multa",
opacity = 1) %>%
setView(lng = -3.68, lat = 40.43, zoom = 12.5)
