data@data
renta <- read.csv('example.txt', sep=';', header=F)
renta
data@data
?left_join
data@data %>%
left_join(renta, by=(NAMEUNIT = V2))
data@data %>%
left_join(renta, by=('NAMEUNIT' = 'V2'))
renta
data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2'))
data@data
renta <- read.csv('example.txt', sep=';', header=F)
data@data <- data@data %>%
select(NAMEUNIT)
data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2'))
data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2')) %>%
select(-V1) %>%
select(name=NAMEUNIT, income=V3)
data@data <- data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2')) %>%
select(-V1) %>%
select(name=NAMEUNIT, income=V3)
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", income)(income),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
addTiles()
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", income)(income))
addTiles()
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", income)(income)) %>%
addTiles()
renta
renta %>% select(V2, V3)
renta %>%
select(V2, V3) %>%
mutate(V3 = V3 / max(V3))
renta <- renta %>%
select(V2, V3) %>%
mutate(V3 = V3 / max(V3))
?colorQuantile
library(rgdal)
library(leaflet)
library(dplyr)
data <- readOGR('recintos_autonomicas_inspire_peninbal_etrs89/recintos_autonomicas_inspire_peninbal_etrs89.shp')
renta <- read.csv('example.txt', sep=';', header=F)
renta <- renta %>%
select(V2, V3) %>%
mutate(V3 = V3 / max(V3))
data@data <- data@data %>%
select(NAMEUNIT)
data@data <- data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2')) %>%
select(-V1) %>%
select(name=NAMEUNIT, income=V3)
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", n=10, income)(income)) %>%
addTiles()
library(rgdal)
library(leaflet)
library(dplyr)
data <- readOGR('recintos_autonomicas_inspire_peninbal_etrs89/recintos_autonomicas_inspire_peninbal_etrs89.shp')
renta <- read.csv('example.txt', sep=';', header=F)
renta <- renta %>%
select(V2, V3) %>%
mutate(V3 = V3 / max(V3))
data@data <- data@data %>%
select(NAMEUNIT)
data@data <- data@data %>%
left_join(renta, by=c('NAMEUNIT'='V2')) %>%
select(name=NAMEUNIT, income=V3)
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", n=10, income)(income)) %>%
addTiles()
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorQuantile("YlOrRd", n=10, income)(income)) %>%
addTiles() %>%
addLegend()
pal <- colorQuantile(
palette = "YlOrRd",
n=10,
domain = data@data$income
)
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(income)) %>%
addTiles() %>%
addLegend("bottomright", pal = pal, values = ~income)
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(income)) %>%
addTiles() %>%
addLegend("bottomright", pal = pal, values = ~income, title='')
?addLegend
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(income)) %>%
addTiles() %>%
addLegend("bottomright", pal = pal, title='')
leaflet(data) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~pal(income)) %>%
addTiles() %>%
addLegend("bottomright", pal = pal, values = ~income, title='')
# Incluimos la libreria
library(ggplot2)
str(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
points(iris$Petal.Length, iris$Petal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
points(iris$Petal.Length, iris$Petal.Width, col='red')
?plot
ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_point(aes(x=Petal.Length, y = Petal.Width), col = 'red')
df <- data.frame(x = c(3, 1, 5), y = c(2, 4, 6), label=c('a', 'b', 'c'))
plot(df$x, df$y)
barplot(df$x)
plot(df$x, df$y, type="l")
plot(df$x, df$y, pch = as.character(df$label))
chart <- ggplot(df, aes(x=x, y=y, label=label))
chart + geom_point()
chart + geom_bar(stat="identity")
chart + geom_line()
chart + geom_area()
# Incluimos el paquete
library(ggplot2)
str(iris)
head(iris)
?qplot
qplot(Sepal.Width, Sepal.Length, data=iris)
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6))
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6), geom="jitter")
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6), geom=c("jitter", "smooth"))
?qplot
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, geom=c("jitter"), facets=~Species)
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, geom=c("jitter"), facets=~Species, xlim=c(0, 5), ylim=c(0,8))
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, geom=c("jitter"), facets=~Species, xlim=c(0, 5), ylim=c(0,8), main="Sepal", xlab="Width", ylab="Length")
?ggplot
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length))
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length)) +
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species), alpha=0.6) +
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species), alpha=0.6) +
geom_jitter()
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species), alpha=0.6) +
geom_jitter() +
stat_smooth()
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species)) +
geom_jitter() +
facet_wrap(~Species)
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species)) +
geom_jitter() +
facet_wrap(~Species) +
coord_cartesian(xlim=c(0,5), ylim=c(0,8))
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species)) +
geom_jitter() +
facet_wrap(~Species) +
coord_cartesian(xlim=c(0,5), ylim=c(0,8)) +
labs(x="Width", y="Length", title="Sepal")
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6), geom=c("jitter", "smooth"))
ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species)) +
geom_jitter(alpha=0.2) +
stat_smooth()
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6), geom="jitter")
qplot(Sepal.Width, Sepal.Length, data=iris, col=Species, alpha=I(0.6), geom=c("jitter", "smooth"))
iris.plot <- ggplot(iris, aes(x=Sepal.Width, y=Sepal.Length, col=Species), alpha=0.6)
iris.plot <- iris.plot + geom_jitter()
iris.plot
iris.plot + stat_smooth(method="lm", se=F, size=1.5)
# Estudiemos el set de datos
str(iris)
head(iris)
library(dplyr)
iris %>% tbl_df()
iris %>% as_tibble()
iris %>% slice(1:3)
iris %>% filter(Species == "setosa")
iris %>% select(Species)
iris %>% select(one_of(c("Species", "Petal.Length")))
iris %>% select(Species, Petal.Length)
iris %>% summarise(Sepal.Length.Mean = mean(Sepal.Length))
iris %>% summarise(Petal.Width.IQR = IQR(Petal.Width))
iris %>% mutate(Sepal.Area = Sepal.Length * Sepal.Width, Petal.Area = Petal.Length * Petal.Width)
iris %>% transmute(Sepal.Area = Sepal.Length * Sepal.Width, Petal.Area = Petal.Length * Petal.Width)
iris %>% group_by(Species)
iris %>%
group_by(Species) %>%
summarise(Petal.Length.Mean = mean(Petal.Length))
iris %>%
group_by(Species) %>%
mutate(Petal.Length.Mean = mean(Petal.Length)) %>%
ungroup()
library(tidyr)
colnames(iris)
iris.long <- iris %>% gather(Part.Measure, Value, 1:4)
str(iris.long)
head(iris.long)
iris.wide <- iris.long %>% spread(Part.Measure, Value) # ERROR, NO HAY IDENTIFICACIÓN DE OBSERVACIÓN
head(iris.long)
iris.long <- iris.long %>% separate(Part.Measure, c("Part", "Measure"), sep="\\.")
str(iris.long)
head(iris.long)
library(dplyr)
weather <- read.table('../data/weather-madrid.txt')
nrow(weather)
str(weather)
head(weather)
unique(weather$V1)
unique(weather$V2)
unique(weather$V3)
colnames(weather) <- c('month', 'day', 'year', 'temp')
table(weather$year)
weather <- weather[weather$year < 2015,]
table(weather$day)
table(weather$month)
summary(weather$temp)
boxplot(weather$temp)
sum(weather$temp < 0)
sum(weather$temp < 0) / nrow(weather)
weather <- weather[weather$temp > 0, ]
weather$temp <- (weather$temp - 32) / 1.8
summary(weather$temp)
table(weather$year)
past <- weather %>%
filter(year < 2014) %>%
arrange(year, month, day) %>%
group_by(year) %>%
mutate(year.day = seq(1, length(day))) %>%
group_by(year.day) %>%
summarise(min = min(temp),
max = max(temp),
mean_inf = mean(temp) - qt(0.975, 2013 - 1995) * sd(temp) / sqrt(n()),
mean_sup = mean(temp) + qt(0.975, 2013 - 1995) * sd(temp) / sqrt(n())) %>%
as.data.frame()
present <- weather %>%
filter(year == 2014) %>%
arrange(year, month, day) %>%
mutate(year.day = seq(1, length(day))) %>%
select(year.day, temp)
present.highs <- present %>%
left_join(past, by = "year.day") %>%
mutate(is.higher = ifelse(temp > max, "Y", "N")) %>%
filter(is.higher == "Y") %>%
select(year.day, temp)
present.lows <- present %>%
left_join(past, by = "year.day") %>%
mutate(is.lower = ifelse(temp < min, "Y", "N")) %>%
filter(is.lower == "Y") %>%
select(year.day, temp)
# Incluimos el paquete
library(ggplot2)
# Estudiemos el set de datos
str(diamonds)
head(diamonds)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_point()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_jitter()
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_point()
ggplot(diamonds, aes(x = cut, y = clarity)) +
geom_jitter()
ggplot(diamonds, aes(x = carat, y = price, alpha=clarity)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price, alpha=0.4)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price), alpha = 0.4) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(alpha = 0.4)
ggplot(diamonds, aes(x = price, y = x * y * z, col = carat)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(col="red1")
ggplot(diamonds, aes(x = clarity, fill=cut)) +
geom_bar()
ggplot(diamonds, aes(x = clarity)) +
geom_bar(fill="skyblue4")
ggplot(diamonds, aes(x = carat, y = price, shape=x * y *z)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price, shape=cut)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(shape=1)
ggplot(diamonds, aes(x = carat, y = price, linetype=x * y * z)) +
geom_smooth(se=F, size=1)
ggplot(diamonds, aes(x = carat, y = price, linetype=cut, col=cut)) +
geom_smooth(se=F, size=1)
ggplot(diamonds, aes(x = carat, y = price, col = cut)) +
geom_smooth(se=F, size=1, linetype="dotdash")
ggplot(diamonds, aes(x = carat, y = price, size = price)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price, size = clarity)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(size=0.5)
gg.cont <- ggplot(diamonds, aes(x = x * y * z, y = price)) +
geom_point()
gg.cont
gg.cont +
scale_x_continuous(name = "size",
limits = c(0, 800),
breaks = seq(0, 800, 200),
minor_breaks = seq(0, 800, 100))
gg.disc <- ggplot(diamonds, aes(x = clarity, y = price)) +
geom_jitter()
gg.disc
gg.disc +
scale_x_discrete(name = "clarity",
limits = c("I1", "SI2", "VVS2", "IF"),
label = c("Bad", "Normal", "Good", "Ideal")) +
scale_y_continuous(limits = c(1000, 2000))
gg.cont <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
gg.cont
gg.cont +
scale_y_log10(name = "log(price)",
breaks = c(500, 1000, 5000, 10000, 15000))
gg.cont +
scale_y_reverse(name = "price (descendant)")
gg.disc <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_jitter()
gg.disc
gg.disc +
scale_x_reverse(name = "cut (descendant)")
gg.disc +
scale_x_discrete(name = "cut (descendant)",
limits = rev(levels(diamonds$cut)))
gg.cont <- ggplot(diamonds, aes(x = carat, y = price, col = carat)) +
geom_point()
gg.cont
gg.cont +
scale_color_gradient(low = "green4", high = "red1")
gg.cont +
scale_color_gradient2(low = "green4", high = "red1", mid = "yellow", midpoint = mean(diamonds$carat))
gg.cont +
scale_color_gradientn(colours = c("green4", "yellow", "red1", "blue4"))
gg.cont +
scale_color_gradientn(colours = rainbow(5))
gg.disc <- ggplot(diamonds, aes(x = clarity, fill=cut)) +
geom_bar()
gg.disc
gg.disc +
scale_fill_grey()
gg.disc +
scale_fill_brewer(palette = "Blues")
library(RColorBrewer)
display.brewer.all()
gg.cont <- ggplot(diamonds, aes(x = carat, y = price, size = price)) +
geom_point()
gg.cont
gg.cont +
scale_size_continuous(range = c(0.05, 5))
gg.cont +
scale_size_area(max_size = 10)
gg.cont <- ggplot(diamonds, aes(x = carat, y = price, shape = price)) +
geom_point()
gg.cont
gg.disc <- ggplot(diamonds, aes(x = carat, y = price, shape = cut)) +
geom_point()
gg.disc
gg.disc +
scale_shape_manual(values = c(3:7))
ggplot(present, aes(x = year.day, y = temp)) +
geom_line()
ggplot(present, aes(x = year.day, y = temp)) +
geom_line(aes(col = temp)) +
scale_color_gradient2(low = "blue", high = "red", mid = "white", midpoint = 15)
ggplot(present, aes(x = year.day, y = temp)) +
geom_line(alpha = 0.5, linetype="dotted") +
geom_point(aes(col = temp), size = 1) +
scale_color_gradient2(low = "blue", high = "red", mid = "white", midpoint = 15) +
geom_point(col = "black", shape = 1, alpha = 0.5)
ggplot(present, aes(x = year.day, y = temp)) +
geom_line(alpha = 0.5, linetype="dotted") +
geom_point(aes(col = temp, size=temp)) +
scale_color_gradient2(low = "blue", high = "red", mid = "white", midpoint = 15) +
geom_point(aes(size=temp), col = "black", shape = 1, alpha = 0.5) +
scale_y_continuous(limits = c(0, 15)) +
scale_size_continuous(range = c(1, 5))
# Incluimos el paquete
library(ggplot2)
# Estudiemos el set de datos
str(iris)
head(iris)
# Una variable continua
# ---------------------
gg <- ggplot(iris, aes(x = Petal.Length))
gg +
geom_area(stat = "bin", bins = 10)
gg +
geom_area()
gg +
geom_area(stat = "bin", bins = 10)
gg +
geom_histogram(binwidth=1)
gg +
geom_bar(binwidth=1)
gg +
geom_area(stat = "bin", bins = 10)
gg +
geom_histogram(binwidth=1)
gg +
geom_density()
gg +
geom_dotplot()
gg <- ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length))
gg +
geom_point()
gg +
geom_jitter()
gg +
geom_line()
gg +
geom_rug()
gg +
geom_smooth(method = "loess")
gg +
geom_text(aes(label = substr(Species, 1, 2)))
gg +
geom_density2d()
gg +
geom_bin2d()
gg <- ggplot(iris, aes(x = Species, y = Sepal.Length))
gg +
geom_bar(stat="identity")
gg +
geom_bar()
gg +
geom_point()
gg +
geom_jitter(width=0.5)
gg +
geom_boxplot()
df <- data.frame(type = c("A", "B"), value = 4:5, variation = 1:2)
gg <- ggplot(df, aes(type, value, ymin = value - variation, ymax = value + variation))
df <- data.frame(type = c("A", "B"), value = 4:5, variation = 1:2)
k <- ggplot(df, aes(type, value, ymin = value-variation, ymax = value+variation))
gg +
geom_crossbar()
gg +
geom_errorbar()
gg +
geom_crossbar()
gg +
geom_errorbar()
gg +
geom_linerange()
# Incluimos los paquetes necesarios
library(ggplot2)
# Pintamos la serie de las temperatura máximas y mínimas históricas
# como un gráfico de rango por línea con color "wheat"
ggplot(past, aes(x = year.day, ymin = min, ymax = max)) +
geom_linerange(col = "wheat")
ggplot(past, aes(x = year.day, ymin = mean_inf, ymax = mean_sup)) +
geom_linerange(col = "wheat4")
ggplot(present, aes(x = year.day, y = temp)) +
geom_line(size = 0.3)
ggplot(present.highs, aes(x = year.day, y = temp)) +
geom_point(col = "firebrick3", size = 1)
ggplot(present.lows, aes(x = year.day, y = temp)) +
geom_point(col = "blue3", size=1)
ggplot() +
geom_linerange(data = past, aes(x = year.day, ymin = min, ymax = max), col = "wheat") +
geom_linerange(data = past, aes(x = year.day, ymin = mean_inf, ymax = mean_sup), col = "wheat4") +
geom_line(data = present, aes(x = year.day, y = temp), size = 0.3) +
geom_point(data = present.highs, aes(x = year.day, y = temp), col = "firebrick3", size = 1) +
geom_point(data = present.lows, aes(x = year.day, y = temp), col = "blue3", size=1)
y.values <- seq(-5, 55, 5)
y.labels <- sapply(y.values, function(x) { paste0(as.character(x), 'º') })
x.values <- seq(15, 365, 30)
x.labels <- c("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
ggplot() +
geom_linerange(data = past, aes(x = year.day, ymin = min, ymax = max), col = "wheat") +
geom_linerange(data = past, aes(x = year.day, ymin = mean_inf, ymax = mean_sup), col = "wheat4") +
geom_line(data = present, aes(x = year.day, y = temp), size = 0.3) +
geom_point(data = present.highs, aes(x = year.day, y = temp), col = "firebrick3", size = 1) +
geom_point(data = present.lows, aes(x = year.day, y = temp), col = "blue3", size=1) +
scale_y_continuous(breaks = y.values, labels = y.labels, name = "", expand = c(0, 0)) +
scale_x_continuous(breaks = x.values, labels = x.labels, name = "", expand = c(0, 0))
